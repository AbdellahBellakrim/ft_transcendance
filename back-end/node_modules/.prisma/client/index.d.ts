
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "User"
  objects: {
    match_host: matchPayload<ExtArgs>[]
    match_guest: matchPayload<ExtArgs>[]
    stats: StatsPayload<ExtArgs> | null
    invited: FriendshipsPayload<ExtArgs>[]
    invitor: FriendshipsPayload<ExtArgs>[]
    initiator: DirectMessagingPayload<ExtArgs>[]
    receiver: DirectMessagingPayload<ExtArgs>[]
    channels: ChannelMembershipPayload<ExtArgs>[]
    messages: MessagePayload<ExtArgs>[]
    notifications: NotificationPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth: boolean
    status: Status
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model User
 * 
 */
export type User = runtime.Types.DefaultSelection<UserPayload>
export type matchPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "match"
  objects: {
    player_1: UserPayload<ExtArgs>
    player_2: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    player_1_id: string
    player_2_id: string
    result: string
  }, ExtArgs["result"]["match"]>
  composites: {}
}

/**
 * Model match
 * 
 */
export type match = runtime.Types.DefaultSelection<matchPayload>
export type StatsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Stats"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    user_id: string
    wins: number
    losses: number
    ladder_level: number
  }, ExtArgs["result"]["stats"]>
  composites: {}
}

/**
 * Model Stats
 * 
 */
export type Stats = runtime.Types.DefaultSelection<StatsPayload>
export type FriendshipsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Friendships"
  objects: {
    user1: UserPayload<ExtArgs>
    user2: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    user1_id: string
    user2_id: string
    createdAt: Date
    relationStatus: RelationStatus
  }, ExtArgs["result"]["friendships"]>
  composites: {}
}

/**
 * Model Friendships
 * 
 */
export type Friendships = runtime.Types.DefaultSelection<FriendshipsPayload>
export type ChannelMembershipPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ChannelMembership"
  objects: {
    channel: ChannelPayload<ExtArgs>
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    channel_id: string
    user_id: string
    role: Role
    joined_at: Date
    is_banned: boolean
    banned_at: Date | null
  }, ExtArgs["result"]["channelMembership"]>
  composites: {}
}

/**
 * Model ChannelMembership
 * 
 */
export type ChannelMembership = runtime.Types.DefaultSelection<ChannelMembershipPayload>
export type MessagePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Message"
  objects: {
    user: UserPayload<ExtArgs>
    channel: ChannelPayload<ExtArgs> | null
    dm: DirectMessagingPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    user_id: string
    channel_id: string | null
    dm_id: string | null
    content: string
    createdAt: Date | null
    is_read: boolean | null
  }, ExtArgs["result"]["message"]>
  composites: {}
}

/**
 * Model Message
 * 
 */
export type Message = runtime.Types.DefaultSelection<MessagePayload>
export type ChannelPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Channel"
  objects: {
    memeberShips: ChannelMembershipPayload<ExtArgs>[]
    messages: MessagePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    type: Channel_type
    name: string
    image: string
    password: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["channel"]>
  composites: {}
}

/**
 * Model Channel
 * 
 */
export type Channel = runtime.Types.DefaultSelection<ChannelPayload>
export type DirectMessagingPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "DirectMessaging"
  objects: {
    user1: UserPayload<ExtArgs>
    user2: UserPayload<ExtArgs>
    messages: MessagePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    user1_id: string
    user2_id: string
    status: DmStatus
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["directMessaging"]>
  composites: {}
}

/**
 * Model DirectMessaging
 * 
 */
export type DirectMessaging = runtime.Types.DefaultSelection<DirectMessagingPayload>
export type NotificationPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Notification"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    user_id: string
    type: NotificationType
    createdAt: Date
  }, ExtArgs["result"]["notification"]>
  composites: {}
}

/**
 * Model Notification
 * 
 */
export type Notification = runtime.Types.DefaultSelection<NotificationPayload>

/**
 * Enums
 */

export const Status: {
  IN_GAME: 'IN_GAME',
  ONLINE: 'ONLINE',
  OFFLINE: 'OFFLINE'
};

export type Status = (typeof Status)[keyof typeof Status]


export const RelationStatus: {
  PENDING: 'PENDING',
  FRIENDS: 'FRIENDS',
  BLOCK: 'BLOCK'
};

export type RelationStatus = (typeof RelationStatus)[keyof typeof RelationStatus]


export const Role: {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  USER: 'USER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Channel_type: {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  PROTECTED: 'PROTECTED'
};

export type Channel_type = (typeof Channel_type)[keyof typeof Channel_type]


export const DmStatus: {
  ALLOWED: 'ALLOWED',
  BANNED: 'BANNED'
};

export type DmStatus = (typeof DmStatus)[keyof typeof DmStatus]


export const NotificationType: {
  ACCEPTED_INVITATION: 'ACCEPTED_INVITATION',
  GAME_INVITATION: 'GAME_INVITATION'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.matchDelegate<ExtArgs>;

  /**
   * `prisma.stats`: Exposes CRUD operations for the **Stats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stats
    * const stats = await prisma.stats.findMany()
    * ```
    */
  get stats(): Prisma.StatsDelegate<ExtArgs>;

  /**
   * `prisma.friendships`: Exposes CRUD operations for the **Friendships** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Friendships
    * const friendships = await prisma.friendships.findMany()
    * ```
    */
  get friendships(): Prisma.FriendshipsDelegate<ExtArgs>;

  /**
   * `prisma.channelMembership`: Exposes CRUD operations for the **ChannelMembership** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChannelMemberships
    * const channelMemberships = await prisma.channelMembership.findMany()
    * ```
    */
  get channelMembership(): Prisma.ChannelMembershipDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.channel`: Exposes CRUD operations for the **Channel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Channels
    * const channels = await prisma.channel.findMany()
    * ```
    */
  get channel(): Prisma.ChannelDelegate<ExtArgs>;

  /**
   * `prisma.directMessaging`: Exposes CRUD operations for the **DirectMessaging** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DirectMessagings
    * const directMessagings = await prisma.directMessaging.findMany()
    * ```
    */
  get directMessaging(): Prisma.DirectMessagingDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 5.0.0
   * Query Engine version: 6b0aef69b7cdfc787f822ecd7cdc76d5f1991584
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    match: 'match',
    Stats: 'Stats',
    Friendships: 'Friendships',
    ChannelMembership: 'ChannelMembership',
    Message: 'Message',
    Channel: 'Channel',
    DirectMessaging: 'DirectMessaging',
    Notification: 'Notification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'match' | 'stats' | 'friendships' | 'channelMembership' | 'message' | 'channel' | 'directMessaging' | 'notification'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      match: {
        payload: matchPayload<ExtArgs>
        fields: Prisma.matchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.matchFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<matchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.matchFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<matchPayload>
          }
          findFirst: {
            args: Prisma.matchFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<matchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.matchFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<matchPayload>
          }
          findMany: {
            args: Prisma.matchFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<matchPayload>[]
          }
          create: {
            args: Prisma.matchCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<matchPayload>
          }
          createMany: {
            args: Prisma.matchCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.matchDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<matchPayload>
          }
          update: {
            args: Prisma.matchUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<matchPayload>
          }
          deleteMany: {
            args: Prisma.matchDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.matchUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.matchUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<matchPayload>
          }
          aggregate: {
            args: Prisma.MatchAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMatch>
          }
          groupBy: {
            args: Prisma.matchGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.matchCountArgs<ExtArgs>,
            result: $Utils.Optional<MatchCountAggregateOutputType> | number
          }
        }
      }
      Stats: {
        payload: StatsPayload<ExtArgs>
        fields: Prisma.StatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StatsPayload>
          }
          findFirst: {
            args: Prisma.StatsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StatsPayload>
          }
          findMany: {
            args: Prisma.StatsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StatsPayload>[]
          }
          create: {
            args: Prisma.StatsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StatsPayload>
          }
          createMany: {
            args: Prisma.StatsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StatsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StatsPayload>
          }
          update: {
            args: Prisma.StatsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StatsPayload>
          }
          deleteMany: {
            args: Prisma.StatsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StatsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StatsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StatsPayload>
          }
          aggregate: {
            args: Prisma.StatsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStats>
          }
          groupBy: {
            args: Prisma.StatsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatsCountArgs<ExtArgs>,
            result: $Utils.Optional<StatsCountAggregateOutputType> | number
          }
        }
      }
      Friendships: {
        payload: FriendshipsPayload<ExtArgs>
        fields: Prisma.FriendshipsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FriendshipsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FriendshipsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FriendshipsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FriendshipsPayload>
          }
          findFirst: {
            args: Prisma.FriendshipsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FriendshipsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FriendshipsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FriendshipsPayload>
          }
          findMany: {
            args: Prisma.FriendshipsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FriendshipsPayload>[]
          }
          create: {
            args: Prisma.FriendshipsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FriendshipsPayload>
          }
          createMany: {
            args: Prisma.FriendshipsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FriendshipsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FriendshipsPayload>
          }
          update: {
            args: Prisma.FriendshipsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FriendshipsPayload>
          }
          deleteMany: {
            args: Prisma.FriendshipsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FriendshipsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FriendshipsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FriendshipsPayload>
          }
          aggregate: {
            args: Prisma.FriendshipsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFriendships>
          }
          groupBy: {
            args: Prisma.FriendshipsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FriendshipsGroupByOutputType>[]
          }
          count: {
            args: Prisma.FriendshipsCountArgs<ExtArgs>,
            result: $Utils.Optional<FriendshipsCountAggregateOutputType> | number
          }
        }
      }
      ChannelMembership: {
        payload: ChannelMembershipPayload<ExtArgs>
        fields: Prisma.ChannelMembershipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChannelMembershipFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChannelMembershipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChannelMembershipFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChannelMembershipPayload>
          }
          findFirst: {
            args: Prisma.ChannelMembershipFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChannelMembershipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChannelMembershipFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChannelMembershipPayload>
          }
          findMany: {
            args: Prisma.ChannelMembershipFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChannelMembershipPayload>[]
          }
          create: {
            args: Prisma.ChannelMembershipCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChannelMembershipPayload>
          }
          createMany: {
            args: Prisma.ChannelMembershipCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChannelMembershipDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChannelMembershipPayload>
          }
          update: {
            args: Prisma.ChannelMembershipUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChannelMembershipPayload>
          }
          deleteMany: {
            args: Prisma.ChannelMembershipDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChannelMembershipUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChannelMembershipUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChannelMembershipPayload>
          }
          aggregate: {
            args: Prisma.ChannelMembershipAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChannelMembership>
          }
          groupBy: {
            args: Prisma.ChannelMembershipGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChannelMembershipGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChannelMembershipCountArgs<ExtArgs>,
            result: $Utils.Optional<ChannelMembershipCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>,
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      Channel: {
        payload: ChannelPayload<ExtArgs>
        fields: Prisma.ChannelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChannelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChannelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChannelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChannelPayload>
          }
          findFirst: {
            args: Prisma.ChannelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChannelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChannelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChannelPayload>
          }
          findMany: {
            args: Prisma.ChannelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChannelPayload>[]
          }
          create: {
            args: Prisma.ChannelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChannelPayload>
          }
          createMany: {
            args: Prisma.ChannelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChannelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChannelPayload>
          }
          update: {
            args: Prisma.ChannelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChannelPayload>
          }
          deleteMany: {
            args: Prisma.ChannelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChannelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChannelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChannelPayload>
          }
          aggregate: {
            args: Prisma.ChannelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChannel>
          }
          groupBy: {
            args: Prisma.ChannelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChannelGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChannelCountArgs<ExtArgs>,
            result: $Utils.Optional<ChannelCountAggregateOutputType> | number
          }
        }
      }
      DirectMessaging: {
        payload: DirectMessagingPayload<ExtArgs>
        fields: Prisma.DirectMessagingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DirectMessagingFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DirectMessagingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DirectMessagingFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DirectMessagingPayload>
          }
          findFirst: {
            args: Prisma.DirectMessagingFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DirectMessagingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DirectMessagingFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DirectMessagingPayload>
          }
          findMany: {
            args: Prisma.DirectMessagingFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DirectMessagingPayload>[]
          }
          create: {
            args: Prisma.DirectMessagingCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DirectMessagingPayload>
          }
          createMany: {
            args: Prisma.DirectMessagingCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DirectMessagingDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DirectMessagingPayload>
          }
          update: {
            args: Prisma.DirectMessagingUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DirectMessagingPayload>
          }
          deleteMany: {
            args: Prisma.DirectMessagingDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DirectMessagingUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DirectMessagingUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DirectMessagingPayload>
          }
          aggregate: {
            args: Prisma.DirectMessagingAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDirectMessaging>
          }
          groupBy: {
            args: Prisma.DirectMessagingGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DirectMessagingGroupByOutputType>[]
          }
          count: {
            args: Prisma.DirectMessagingCountArgs<ExtArgs>,
            result: $Utils.Optional<DirectMessagingCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    match_host: number
    match_guest: number
    invited: number
    invitor: number
    initiator: number
    receiver: number
    channels: number
    messages: number
    notifications: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    match_host?: boolean | UserCountOutputTypeCountMatch_hostArgs
    match_guest?: boolean | UserCountOutputTypeCountMatch_guestArgs
    invited?: boolean | UserCountOutputTypeCountInvitedArgs
    invitor?: boolean | UserCountOutputTypeCountInvitorArgs
    initiator?: boolean | UserCountOutputTypeCountInitiatorArgs
    receiver?: boolean | UserCountOutputTypeCountReceiverArgs
    channels?: boolean | UserCountOutputTypeCountChannelsArgs
    messages?: boolean | UserCountOutputTypeCountMessagesArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMatch_hostArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: matchWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMatch_guestArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: matchWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInvitedArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FriendshipsWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInvitorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FriendshipsWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInitiatorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DirectMessagingWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceiverArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DirectMessagingWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChannelsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChannelMembershipWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }



  /**
   * Count Type ChannelCountOutputType
   */


  export type ChannelCountOutputType = {
    memeberShips: number
    messages: number
  }

  export type ChannelCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    memeberShips?: boolean | ChannelCountOutputTypeCountMemeberShipsArgs
    messages?: boolean | ChannelCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes

  /**
   * ChannelCountOutputType without action
   */
  export type ChannelCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelCountOutputType
     */
    select?: ChannelCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ChannelCountOutputType without action
   */
  export type ChannelCountOutputTypeCountMemeberShipsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChannelMembershipWhereInput
  }


  /**
   * ChannelCountOutputType without action
   */
  export type ChannelCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }



  /**
   * Count Type DirectMessagingCountOutputType
   */


  export type DirectMessagingCountOutputType = {
    messages: number
  }

  export type DirectMessagingCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    messages?: boolean | DirectMessagingCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes

  /**
   * DirectMessagingCountOutputType without action
   */
  export type DirectMessagingCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessagingCountOutputType
     */
    select?: DirectMessagingCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DirectMessagingCountOutputType without action
   */
  export type DirectMessagingCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    firstname: string | null
    lastname: string | null
    email: string | null
    avatar: string | null
    background: string | null
    firstauth: boolean | null
    status: Status | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    firstname: string | null
    lastname: string | null
    email: string | null
    avatar: string | null
    background: string | null
    firstauth: boolean | null
    status: Status | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    firstname: number
    lastname: number
    email: number
    avatar: number
    background: number
    firstauth: number
    status: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    firstname?: true
    lastname?: true
    email?: true
    avatar?: true
    background?: true
    firstauth?: true
    status?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    firstname?: true
    lastname?: true
    email?: true
    avatar?: true
    background?: true
    firstauth?: true
    status?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    firstname?: true
    lastname?: true
    email?: true
    avatar?: true
    background?: true
    firstauth?: true
    status?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth: boolean
    status: Status
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    firstname?: boolean
    lastname?: boolean
    email?: boolean
    avatar?: boolean
    background?: boolean
    firstauth?: boolean
    status?: boolean
    match_host?: boolean | User$match_hostArgs<ExtArgs>
    match_guest?: boolean | User$match_guestArgs<ExtArgs>
    stats?: boolean | User$statsArgs<ExtArgs>
    invited?: boolean | User$invitedArgs<ExtArgs>
    invitor?: boolean | User$invitorArgs<ExtArgs>
    initiator?: boolean | User$initiatorArgs<ExtArgs>
    receiver?: boolean | User$receiverArgs<ExtArgs>
    channels?: boolean | User$channelsArgs<ExtArgs>
    messages?: boolean | User$messagesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    firstname?: boolean
    lastname?: boolean
    email?: boolean
    avatar?: boolean
    background?: boolean
    firstauth?: boolean
    status?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    match_host?: boolean | User$match_hostArgs<ExtArgs>
    match_guest?: boolean | User$match_guestArgs<ExtArgs>
    stats?: boolean | User$statsArgs<ExtArgs>
    invited?: boolean | User$invitedArgs<ExtArgs>
    invitor?: boolean | User$invitorArgs<ExtArgs>
    initiator?: boolean | User$initiatorArgs<ExtArgs>
    receiver?: boolean | User$receiverArgs<ExtArgs>
    channels?: boolean | User$channelsArgs<ExtArgs>
    messages?: boolean | User$messagesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }


  type UserGetPayload<S extends boolean | null | undefined | UserArgs> = $Types.GetResult<UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    match_host<T extends User$match_hostArgs<ExtArgs> = {}>(args?: Subset<T, User$match_hostArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<matchPayload<ExtArgs>, T, 'findMany'>| Null>;

    match_guest<T extends User$match_guestArgs<ExtArgs> = {}>(args?: Subset<T, User$match_guestArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<matchPayload<ExtArgs>, T, 'findMany'>| Null>;

    stats<T extends User$statsArgs<ExtArgs> = {}>(args?: Subset<T, User$statsArgs<ExtArgs>>): Prisma__StatsClient<$Types.GetResult<StatsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    invited<T extends User$invitedArgs<ExtArgs> = {}>(args?: Subset<T, User$invitedArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<FriendshipsPayload<ExtArgs>, T, 'findMany'>| Null>;

    invitor<T extends User$invitorArgs<ExtArgs> = {}>(args?: Subset<T, User$invitorArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<FriendshipsPayload<ExtArgs>, T, 'findMany'>| Null>;

    initiator<T extends User$initiatorArgs<ExtArgs> = {}>(args?: Subset<T, User$initiatorArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<DirectMessagingPayload<ExtArgs>, T, 'findMany'>| Null>;

    receiver<T extends User$receiverArgs<ExtArgs> = {}>(args?: Subset<T, User$receiverArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<DirectMessagingPayload<ExtArgs>, T, 'findMany'>| Null>;

    channels<T extends User$channelsArgs<ExtArgs> = {}>(args?: Subset<T, User$channelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ChannelMembershipPayload<ExtArgs>, T, 'findMany'>| Null>;

    messages<T extends User$messagesArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findMany'>| Null>;

    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<NotificationPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly firstname: FieldRef<"User", 'String'>
    readonly lastname: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly background: FieldRef<"User", 'String'>
    readonly firstauth: FieldRef<"User", 'Boolean'>
    readonly status: FieldRef<"User", 'Status'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.match_host
   */
  export type User$match_hostArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    where?: matchWhereInput
    orderBy?: matchOrderByWithRelationInput | matchOrderByWithRelationInput[]
    cursor?: matchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }


  /**
   * User.match_guest
   */
  export type User$match_guestArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    where?: matchWhereInput
    orderBy?: matchOrderByWithRelationInput | matchOrderByWithRelationInput[]
    cursor?: matchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }


  /**
   * User.stats
   */
  export type User$statsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stats
     */
    select?: StatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatsInclude<ExtArgs> | null
    where?: StatsWhereInput
  }


  /**
   * User.invited
   */
  export type User$invitedArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendships
     */
    select?: FriendshipsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipsInclude<ExtArgs> | null
    where?: FriendshipsWhereInput
    orderBy?: FriendshipsOrderByWithRelationInput | FriendshipsOrderByWithRelationInput[]
    cursor?: FriendshipsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FriendshipsScalarFieldEnum | FriendshipsScalarFieldEnum[]
  }


  /**
   * User.invitor
   */
  export type User$invitorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendships
     */
    select?: FriendshipsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipsInclude<ExtArgs> | null
    where?: FriendshipsWhereInput
    orderBy?: FriendshipsOrderByWithRelationInput | FriendshipsOrderByWithRelationInput[]
    cursor?: FriendshipsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FriendshipsScalarFieldEnum | FriendshipsScalarFieldEnum[]
  }


  /**
   * User.initiator
   */
  export type User$initiatorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessaging
     */
    select?: DirectMessagingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMessagingInclude<ExtArgs> | null
    where?: DirectMessagingWhereInput
    orderBy?: DirectMessagingOrderByWithRelationInput | DirectMessagingOrderByWithRelationInput[]
    cursor?: DirectMessagingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DirectMessagingScalarFieldEnum | DirectMessagingScalarFieldEnum[]
  }


  /**
   * User.receiver
   */
  export type User$receiverArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessaging
     */
    select?: DirectMessagingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMessagingInclude<ExtArgs> | null
    where?: DirectMessagingWhereInput
    orderBy?: DirectMessagingOrderByWithRelationInput | DirectMessagingOrderByWithRelationInput[]
    cursor?: DirectMessagingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DirectMessagingScalarFieldEnum | DirectMessagingScalarFieldEnum[]
  }


  /**
   * User.channels
   */
  export type User$channelsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMembership
     */
    select?: ChannelMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMembershipInclude<ExtArgs> | null
    where?: ChannelMembershipWhereInput
    orderBy?: ChannelMembershipOrderByWithRelationInput | ChannelMembershipOrderByWithRelationInput[]
    cursor?: ChannelMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChannelMembershipScalarFieldEnum | ChannelMembershipScalarFieldEnum[]
  }


  /**
   * User.messages
   */
  export type User$messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model match
   */


  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchMinAggregateOutputType = {
    id: string | null
    player_1_id: string | null
    player_2_id: string | null
    result: string | null
  }

  export type MatchMaxAggregateOutputType = {
    id: string | null
    player_1_id: string | null
    player_2_id: string | null
    result: string | null
  }

  export type MatchCountAggregateOutputType = {
    id: number
    player_1_id: number
    player_2_id: number
    result: number
    _all: number
  }


  export type MatchMinAggregateInputType = {
    id?: true
    player_1_id?: true
    player_2_id?: true
    result?: true
  }

  export type MatchMaxAggregateInputType = {
    id?: true
    player_1_id?: true
    player_2_id?: true
    result?: true
  }

  export type MatchCountAggregateInputType = {
    id?: true
    player_1_id?: true
    player_2_id?: true
    result?: true
    _all?: true
  }

  export type MatchAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which match to aggregate.
     */
    where?: matchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of matches to fetch.
     */
    orderBy?: matchOrderByWithRelationInput | matchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: matchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type matchGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: matchWhereInput
    orderBy?: matchOrderByWithAggregationInput | matchOrderByWithAggregationInput[]
    by: MatchScalarFieldEnum[] | MatchScalarFieldEnum
    having?: matchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }


  export type MatchGroupByOutputType = {
    id: string
    player_1_id: string
    player_2_id: string
    result: string
    _count: MatchCountAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends matchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type matchSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    player_1_id?: boolean
    player_2_id?: boolean
    result?: boolean
    player_1?: boolean | UserArgs<ExtArgs>
    player_2?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type matchSelectScalar = {
    id?: boolean
    player_1_id?: boolean
    player_2_id?: boolean
    result?: boolean
  }

  export type matchInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    player_1?: boolean | UserArgs<ExtArgs>
    player_2?: boolean | UserArgs<ExtArgs>
  }


  type matchGetPayload<S extends boolean | null | undefined | matchArgs> = $Types.GetResult<matchPayload, S>

  type matchCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<matchFindManyArgs, 'select' | 'include'> & {
      select?: MatchCountAggregateInputType | true
    }

  export interface matchDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['match'], meta: { name: 'match' } }
    /**
     * Find zero or one Match that matches the filter.
     * @param {matchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends matchFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, matchFindUniqueArgs<ExtArgs>>
    ): Prisma__matchClient<$Types.GetResult<matchPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Match that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {matchFindUniqueOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends matchFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, matchFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__matchClient<$Types.GetResult<matchPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {matchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends matchFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, matchFindFirstArgs<ExtArgs>>
    ): Prisma__matchClient<$Types.GetResult<matchPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Match that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {matchFindFirstOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends matchFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, matchFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__matchClient<$Types.GetResult<matchPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {matchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchWithIdOnly = await prisma.match.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends matchFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, matchFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<matchPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Match.
     * @param {matchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
    **/
    create<T extends matchCreateArgs<ExtArgs>>(
      args: SelectSubset<T, matchCreateArgs<ExtArgs>>
    ): Prisma__matchClient<$Types.GetResult<matchPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Matches.
     *     @param {matchCreateManyArgs} args - Arguments to create many Matches.
     *     @example
     *     // Create many Matches
     *     const match = await prisma.match.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends matchCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, matchCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Match.
     * @param {matchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
    **/
    delete<T extends matchDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, matchDeleteArgs<ExtArgs>>
    ): Prisma__matchClient<$Types.GetResult<matchPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Match.
     * @param {matchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends matchUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, matchUpdateArgs<ExtArgs>>
    ): Prisma__matchClient<$Types.GetResult<matchPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Matches.
     * @param {matchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends matchDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, matchDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {matchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends matchUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, matchUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Match.
     * @param {matchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
    **/
    upsert<T extends matchUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, matchUpsertArgs<ExtArgs>>
    ): Prisma__matchClient<$Types.GetResult<matchPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {matchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends matchCountArgs>(
      args?: Subset<T, matchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): Prisma.PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {matchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends matchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: matchGroupByArgs['orderBy'] }
        : { orderBy?: matchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, matchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the match model
   */
  readonly fields: matchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__matchClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    player_1<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    player_2<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the match model
   */ 
  interface matchFieldRefs {
    readonly id: FieldRef<"match", 'String'>
    readonly player_1_id: FieldRef<"match", 'String'>
    readonly player_2_id: FieldRef<"match", 'String'>
    readonly result: FieldRef<"match", 'String'>
  }
    

  // Custom InputTypes

  /**
   * match findUnique
   */
  export type matchFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    /**
     * Filter, which match to fetch.
     */
    where: matchWhereUniqueInput
  }


  /**
   * match findUniqueOrThrow
   */
  export type matchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    /**
     * Filter, which match to fetch.
     */
    where: matchWhereUniqueInput
  }


  /**
   * match findFirst
   */
  export type matchFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    /**
     * Filter, which match to fetch.
     */
    where?: matchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of matches to fetch.
     */
    orderBy?: matchOrderByWithRelationInput | matchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for matches.
     */
    cursor?: matchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }


  /**
   * match findFirstOrThrow
   */
  export type matchFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    /**
     * Filter, which match to fetch.
     */
    where?: matchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of matches to fetch.
     */
    orderBy?: matchOrderByWithRelationInput | matchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for matches.
     */
    cursor?: matchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }


  /**
   * match findMany
   */
  export type matchFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    /**
     * Filter, which matches to fetch.
     */
    where?: matchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of matches to fetch.
     */
    orderBy?: matchOrderByWithRelationInput | matchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing matches.
     */
    cursor?: matchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` matches.
     */
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }


  /**
   * match create
   */
  export type matchCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    /**
     * The data needed to create a match.
     */
    data: XOR<matchCreateInput, matchUncheckedCreateInput>
  }


  /**
   * match createMany
   */
  export type matchCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many matches.
     */
    data: matchCreateManyInput | matchCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * match update
   */
  export type matchUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    /**
     * The data needed to update a match.
     */
    data: XOR<matchUpdateInput, matchUncheckedUpdateInput>
    /**
     * Choose, which match to update.
     */
    where: matchWhereUniqueInput
  }


  /**
   * match updateMany
   */
  export type matchUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update matches.
     */
    data: XOR<matchUpdateManyMutationInput, matchUncheckedUpdateManyInput>
    /**
     * Filter which matches to update
     */
    where?: matchWhereInput
  }


  /**
   * match upsert
   */
  export type matchUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    /**
     * The filter to search for the match to update in case it exists.
     */
    where: matchWhereUniqueInput
    /**
     * In case the match found by the `where` argument doesn't exist, create a new match with this data.
     */
    create: XOR<matchCreateInput, matchUncheckedCreateInput>
    /**
     * In case the match was found with the provided `where` argument, update it with this data.
     */
    update: XOR<matchUpdateInput, matchUncheckedUpdateInput>
  }


  /**
   * match delete
   */
  export type matchDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    /**
     * Filter which match to delete.
     */
    where: matchWhereUniqueInput
  }


  /**
   * match deleteMany
   */
  export type matchDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which matches to delete
     */
    where?: matchWhereInput
  }


  /**
   * match without action
   */
  export type matchArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
  }



  /**
   * Model Stats
   */


  export type AggregateStats = {
    _count: StatsCountAggregateOutputType | null
    _avg: StatsAvgAggregateOutputType | null
    _sum: StatsSumAggregateOutputType | null
    _min: StatsMinAggregateOutputType | null
    _max: StatsMaxAggregateOutputType | null
  }

  export type StatsAvgAggregateOutputType = {
    wins: number | null
    losses: number | null
    ladder_level: number | null
  }

  export type StatsSumAggregateOutputType = {
    wins: number | null
    losses: number | null
    ladder_level: number | null
  }

  export type StatsMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    wins: number | null
    losses: number | null
    ladder_level: number | null
  }

  export type StatsMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    wins: number | null
    losses: number | null
    ladder_level: number | null
  }

  export type StatsCountAggregateOutputType = {
    id: number
    user_id: number
    wins: number
    losses: number
    ladder_level: number
    _all: number
  }


  export type StatsAvgAggregateInputType = {
    wins?: true
    losses?: true
    ladder_level?: true
  }

  export type StatsSumAggregateInputType = {
    wins?: true
    losses?: true
    ladder_level?: true
  }

  export type StatsMinAggregateInputType = {
    id?: true
    user_id?: true
    wins?: true
    losses?: true
    ladder_level?: true
  }

  export type StatsMaxAggregateInputType = {
    id?: true
    user_id?: true
    wins?: true
    losses?: true
    ladder_level?: true
  }

  export type StatsCountAggregateInputType = {
    id?: true
    user_id?: true
    wins?: true
    losses?: true
    ladder_level?: true
    _all?: true
  }

  export type StatsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stats to aggregate.
     */
    where?: StatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stats to fetch.
     */
    orderBy?: StatsOrderByWithRelationInput | StatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stats
    **/
    _count?: true | StatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatsMaxAggregateInputType
  }

  export type GetStatsAggregateType<T extends StatsAggregateArgs> = {
        [P in keyof T & keyof AggregateStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStats[P]>
      : GetScalarType<T[P], AggregateStats[P]>
  }




  export type StatsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: StatsWhereInput
    orderBy?: StatsOrderByWithAggregationInput | StatsOrderByWithAggregationInput[]
    by: StatsScalarFieldEnum[] | StatsScalarFieldEnum
    having?: StatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatsCountAggregateInputType | true
    _avg?: StatsAvgAggregateInputType
    _sum?: StatsSumAggregateInputType
    _min?: StatsMinAggregateInputType
    _max?: StatsMaxAggregateInputType
  }


  export type StatsGroupByOutputType = {
    id: string
    user_id: string
    wins: number
    losses: number
    ladder_level: number
    _count: StatsCountAggregateOutputType | null
    _avg: StatsAvgAggregateOutputType | null
    _sum: StatsSumAggregateOutputType | null
    _min: StatsMinAggregateOutputType | null
    _max: StatsMaxAggregateOutputType | null
  }

  type GetStatsGroupByPayload<T extends StatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatsGroupByOutputType[P]>
            : GetScalarType<T[P], StatsGroupByOutputType[P]>
        }
      >
    >


  export type StatsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    wins?: boolean
    losses?: boolean
    ladder_level?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["stats"]>

  export type StatsSelectScalar = {
    id?: boolean
    user_id?: boolean
    wins?: boolean
    losses?: boolean
    ladder_level?: boolean
  }

  export type StatsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type StatsGetPayload<S extends boolean | null | undefined | StatsArgs> = $Types.GetResult<StatsPayload, S>

  type StatsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<StatsFindManyArgs, 'select' | 'include'> & {
      select?: StatsCountAggregateInputType | true
    }

  export interface StatsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stats'], meta: { name: 'Stats' } }
    /**
     * Find zero or one Stats that matches the filter.
     * @param {StatsFindUniqueArgs} args - Arguments to find a Stats
     * @example
     * // Get one Stats
     * const stats = await prisma.stats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StatsFindUniqueArgs<ExtArgs>>
    ): Prisma__StatsClient<$Types.GetResult<StatsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Stats that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StatsFindUniqueOrThrowArgs} args - Arguments to find a Stats
     * @example
     * // Get one Stats
     * const stats = await prisma.stats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StatsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StatsClient<$Types.GetResult<StatsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Stats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsFindFirstArgs} args - Arguments to find a Stats
     * @example
     * // Get one Stats
     * const stats = await prisma.stats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StatsFindFirstArgs<ExtArgs>>
    ): Prisma__StatsClient<$Types.GetResult<StatsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Stats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsFindFirstOrThrowArgs} args - Arguments to find a Stats
     * @example
     * // Get one Stats
     * const stats = await prisma.stats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StatsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StatsClient<$Types.GetResult<StatsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Stats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stats
     * const stats = await prisma.stats.findMany()
     * 
     * // Get first 10 Stats
     * const stats = await prisma.stats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statsWithIdOnly = await prisma.stats.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StatsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<StatsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Stats.
     * @param {StatsCreateArgs} args - Arguments to create a Stats.
     * @example
     * // Create one Stats
     * const Stats = await prisma.stats.create({
     *   data: {
     *     // ... data to create a Stats
     *   }
     * })
     * 
    **/
    create<T extends StatsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StatsCreateArgs<ExtArgs>>
    ): Prisma__StatsClient<$Types.GetResult<StatsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Stats.
     *     @param {StatsCreateManyArgs} args - Arguments to create many Stats.
     *     @example
     *     // Create many Stats
     *     const stats = await prisma.stats.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StatsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Stats.
     * @param {StatsDeleteArgs} args - Arguments to delete one Stats.
     * @example
     * // Delete one Stats
     * const Stats = await prisma.stats.delete({
     *   where: {
     *     // ... filter to delete one Stats
     *   }
     * })
     * 
    **/
    delete<T extends StatsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StatsDeleteArgs<ExtArgs>>
    ): Prisma__StatsClient<$Types.GetResult<StatsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Stats.
     * @param {StatsUpdateArgs} args - Arguments to update one Stats.
     * @example
     * // Update one Stats
     * const stats = await prisma.stats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StatsUpdateArgs<ExtArgs>>
    ): Prisma__StatsClient<$Types.GetResult<StatsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Stats.
     * @param {StatsDeleteManyArgs} args - Arguments to filter Stats to delete.
     * @example
     * // Delete a few Stats
     * const { count } = await prisma.stats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stats
     * const stats = await prisma.stats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StatsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Stats.
     * @param {StatsUpsertArgs} args - Arguments to update or create a Stats.
     * @example
     * // Update or create a Stats
     * const stats = await prisma.stats.upsert({
     *   create: {
     *     // ... data to create a Stats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stats we want to update
     *   }
     * })
    **/
    upsert<T extends StatsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StatsUpsertArgs<ExtArgs>>
    ): Prisma__StatsClient<$Types.GetResult<StatsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Stats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsCountArgs} args - Arguments to filter Stats to count.
     * @example
     * // Count the number of Stats
     * const count = await prisma.stats.count({
     *   where: {
     *     // ... the filter for the Stats we want to count
     *   }
     * })
    **/
    count<T extends StatsCountArgs>(
      args?: Subset<T, StatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatsAggregateArgs>(args: Subset<T, StatsAggregateArgs>): Prisma.PrismaPromise<GetStatsAggregateType<T>>

    /**
     * Group by Stats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatsGroupByArgs['orderBy'] }
        : { orderBy?: StatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stats model
   */
  readonly fields: StatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StatsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Stats model
   */ 
  interface StatsFieldRefs {
    readonly id: FieldRef<"Stats", 'String'>
    readonly user_id: FieldRef<"Stats", 'String'>
    readonly wins: FieldRef<"Stats", 'Int'>
    readonly losses: FieldRef<"Stats", 'Int'>
    readonly ladder_level: FieldRef<"Stats", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Stats findUnique
   */
  export type StatsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stats
     */
    select?: StatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatsInclude<ExtArgs> | null
    /**
     * Filter, which Stats to fetch.
     */
    where: StatsWhereUniqueInput
  }


  /**
   * Stats findUniqueOrThrow
   */
  export type StatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stats
     */
    select?: StatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatsInclude<ExtArgs> | null
    /**
     * Filter, which Stats to fetch.
     */
    where: StatsWhereUniqueInput
  }


  /**
   * Stats findFirst
   */
  export type StatsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stats
     */
    select?: StatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatsInclude<ExtArgs> | null
    /**
     * Filter, which Stats to fetch.
     */
    where?: StatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stats to fetch.
     */
    orderBy?: StatsOrderByWithRelationInput | StatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stats.
     */
    cursor?: StatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stats.
     */
    distinct?: StatsScalarFieldEnum | StatsScalarFieldEnum[]
  }


  /**
   * Stats findFirstOrThrow
   */
  export type StatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stats
     */
    select?: StatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatsInclude<ExtArgs> | null
    /**
     * Filter, which Stats to fetch.
     */
    where?: StatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stats to fetch.
     */
    orderBy?: StatsOrderByWithRelationInput | StatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stats.
     */
    cursor?: StatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stats.
     */
    distinct?: StatsScalarFieldEnum | StatsScalarFieldEnum[]
  }


  /**
   * Stats findMany
   */
  export type StatsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stats
     */
    select?: StatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatsInclude<ExtArgs> | null
    /**
     * Filter, which Stats to fetch.
     */
    where?: StatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stats to fetch.
     */
    orderBy?: StatsOrderByWithRelationInput | StatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stats.
     */
    cursor?: StatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stats.
     */
    skip?: number
    distinct?: StatsScalarFieldEnum | StatsScalarFieldEnum[]
  }


  /**
   * Stats create
   */
  export type StatsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stats
     */
    select?: StatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatsInclude<ExtArgs> | null
    /**
     * The data needed to create a Stats.
     */
    data: XOR<StatsCreateInput, StatsUncheckedCreateInput>
  }


  /**
   * Stats createMany
   */
  export type StatsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stats.
     */
    data: StatsCreateManyInput | StatsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Stats update
   */
  export type StatsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stats
     */
    select?: StatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatsInclude<ExtArgs> | null
    /**
     * The data needed to update a Stats.
     */
    data: XOR<StatsUpdateInput, StatsUncheckedUpdateInput>
    /**
     * Choose, which Stats to update.
     */
    where: StatsWhereUniqueInput
  }


  /**
   * Stats updateMany
   */
  export type StatsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stats.
     */
    data: XOR<StatsUpdateManyMutationInput, StatsUncheckedUpdateManyInput>
    /**
     * Filter which Stats to update
     */
    where?: StatsWhereInput
  }


  /**
   * Stats upsert
   */
  export type StatsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stats
     */
    select?: StatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatsInclude<ExtArgs> | null
    /**
     * The filter to search for the Stats to update in case it exists.
     */
    where: StatsWhereUniqueInput
    /**
     * In case the Stats found by the `where` argument doesn't exist, create a new Stats with this data.
     */
    create: XOR<StatsCreateInput, StatsUncheckedCreateInput>
    /**
     * In case the Stats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatsUpdateInput, StatsUncheckedUpdateInput>
  }


  /**
   * Stats delete
   */
  export type StatsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stats
     */
    select?: StatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatsInclude<ExtArgs> | null
    /**
     * Filter which Stats to delete.
     */
    where: StatsWhereUniqueInput
  }


  /**
   * Stats deleteMany
   */
  export type StatsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stats to delete
     */
    where?: StatsWhereInput
  }


  /**
   * Stats without action
   */
  export type StatsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stats
     */
    select?: StatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatsInclude<ExtArgs> | null
  }



  /**
   * Model Friendships
   */


  export type AggregateFriendships = {
    _count: FriendshipsCountAggregateOutputType | null
    _min: FriendshipsMinAggregateOutputType | null
    _max: FriendshipsMaxAggregateOutputType | null
  }

  export type FriendshipsMinAggregateOutputType = {
    id: string | null
    user1_id: string | null
    user2_id: string | null
    createdAt: Date | null
    relationStatus: RelationStatus | null
  }

  export type FriendshipsMaxAggregateOutputType = {
    id: string | null
    user1_id: string | null
    user2_id: string | null
    createdAt: Date | null
    relationStatus: RelationStatus | null
  }

  export type FriendshipsCountAggregateOutputType = {
    id: number
    user1_id: number
    user2_id: number
    createdAt: number
    relationStatus: number
    _all: number
  }


  export type FriendshipsMinAggregateInputType = {
    id?: true
    user1_id?: true
    user2_id?: true
    createdAt?: true
    relationStatus?: true
  }

  export type FriendshipsMaxAggregateInputType = {
    id?: true
    user1_id?: true
    user2_id?: true
    createdAt?: true
    relationStatus?: true
  }

  export type FriendshipsCountAggregateInputType = {
    id?: true
    user1_id?: true
    user2_id?: true
    createdAt?: true
    relationStatus?: true
    _all?: true
  }

  export type FriendshipsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Friendships to aggregate.
     */
    where?: FriendshipsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipsOrderByWithRelationInput | FriendshipsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FriendshipsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Friendships
    **/
    _count?: true | FriendshipsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FriendshipsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FriendshipsMaxAggregateInputType
  }

  export type GetFriendshipsAggregateType<T extends FriendshipsAggregateArgs> = {
        [P in keyof T & keyof AggregateFriendships]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFriendships[P]>
      : GetScalarType<T[P], AggregateFriendships[P]>
  }




  export type FriendshipsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FriendshipsWhereInput
    orderBy?: FriendshipsOrderByWithAggregationInput | FriendshipsOrderByWithAggregationInput[]
    by: FriendshipsScalarFieldEnum[] | FriendshipsScalarFieldEnum
    having?: FriendshipsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FriendshipsCountAggregateInputType | true
    _min?: FriendshipsMinAggregateInputType
    _max?: FriendshipsMaxAggregateInputType
  }


  export type FriendshipsGroupByOutputType = {
    id: string
    user1_id: string
    user2_id: string
    createdAt: Date
    relationStatus: RelationStatus
    _count: FriendshipsCountAggregateOutputType | null
    _min: FriendshipsMinAggregateOutputType | null
    _max: FriendshipsMaxAggregateOutputType | null
  }

  type GetFriendshipsGroupByPayload<T extends FriendshipsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FriendshipsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FriendshipsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FriendshipsGroupByOutputType[P]>
            : GetScalarType<T[P], FriendshipsGroupByOutputType[P]>
        }
      >
    >


  export type FriendshipsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user1_id?: boolean
    user2_id?: boolean
    createdAt?: boolean
    relationStatus?: boolean
    user1?: boolean | UserArgs<ExtArgs>
    user2?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["friendships"]>

  export type FriendshipsSelectScalar = {
    id?: boolean
    user1_id?: boolean
    user2_id?: boolean
    createdAt?: boolean
    relationStatus?: boolean
  }

  export type FriendshipsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user1?: boolean | UserArgs<ExtArgs>
    user2?: boolean | UserArgs<ExtArgs>
  }


  type FriendshipsGetPayload<S extends boolean | null | undefined | FriendshipsArgs> = $Types.GetResult<FriendshipsPayload, S>

  type FriendshipsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FriendshipsFindManyArgs, 'select' | 'include'> & {
      select?: FriendshipsCountAggregateInputType | true
    }

  export interface FriendshipsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Friendships'], meta: { name: 'Friendships' } }
    /**
     * Find zero or one Friendships that matches the filter.
     * @param {FriendshipsFindUniqueArgs} args - Arguments to find a Friendships
     * @example
     * // Get one Friendships
     * const friendships = await prisma.friendships.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FriendshipsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FriendshipsFindUniqueArgs<ExtArgs>>
    ): Prisma__FriendshipsClient<$Types.GetResult<FriendshipsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Friendships that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FriendshipsFindUniqueOrThrowArgs} args - Arguments to find a Friendships
     * @example
     * // Get one Friendships
     * const friendships = await prisma.friendships.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FriendshipsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FriendshipsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FriendshipsClient<$Types.GetResult<FriendshipsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Friendships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipsFindFirstArgs} args - Arguments to find a Friendships
     * @example
     * // Get one Friendships
     * const friendships = await prisma.friendships.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FriendshipsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FriendshipsFindFirstArgs<ExtArgs>>
    ): Prisma__FriendshipsClient<$Types.GetResult<FriendshipsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Friendships that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipsFindFirstOrThrowArgs} args - Arguments to find a Friendships
     * @example
     * // Get one Friendships
     * const friendships = await prisma.friendships.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FriendshipsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FriendshipsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FriendshipsClient<$Types.GetResult<FriendshipsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Friendships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Friendships
     * const friendships = await prisma.friendships.findMany()
     * 
     * // Get first 10 Friendships
     * const friendships = await prisma.friendships.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const friendshipsWithIdOnly = await prisma.friendships.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FriendshipsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FriendshipsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<FriendshipsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Friendships.
     * @param {FriendshipsCreateArgs} args - Arguments to create a Friendships.
     * @example
     * // Create one Friendships
     * const Friendships = await prisma.friendships.create({
     *   data: {
     *     // ... data to create a Friendships
     *   }
     * })
     * 
    **/
    create<T extends FriendshipsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FriendshipsCreateArgs<ExtArgs>>
    ): Prisma__FriendshipsClient<$Types.GetResult<FriendshipsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Friendships.
     *     @param {FriendshipsCreateManyArgs} args - Arguments to create many Friendships.
     *     @example
     *     // Create many Friendships
     *     const friendships = await prisma.friendships.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FriendshipsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FriendshipsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Friendships.
     * @param {FriendshipsDeleteArgs} args - Arguments to delete one Friendships.
     * @example
     * // Delete one Friendships
     * const Friendships = await prisma.friendships.delete({
     *   where: {
     *     // ... filter to delete one Friendships
     *   }
     * })
     * 
    **/
    delete<T extends FriendshipsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FriendshipsDeleteArgs<ExtArgs>>
    ): Prisma__FriendshipsClient<$Types.GetResult<FriendshipsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Friendships.
     * @param {FriendshipsUpdateArgs} args - Arguments to update one Friendships.
     * @example
     * // Update one Friendships
     * const friendships = await prisma.friendships.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FriendshipsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FriendshipsUpdateArgs<ExtArgs>>
    ): Prisma__FriendshipsClient<$Types.GetResult<FriendshipsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Friendships.
     * @param {FriendshipsDeleteManyArgs} args - Arguments to filter Friendships to delete.
     * @example
     * // Delete a few Friendships
     * const { count } = await prisma.friendships.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FriendshipsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FriendshipsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Friendships
     * const friendships = await prisma.friendships.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FriendshipsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FriendshipsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Friendships.
     * @param {FriendshipsUpsertArgs} args - Arguments to update or create a Friendships.
     * @example
     * // Update or create a Friendships
     * const friendships = await prisma.friendships.upsert({
     *   create: {
     *     // ... data to create a Friendships
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Friendships we want to update
     *   }
     * })
    **/
    upsert<T extends FriendshipsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FriendshipsUpsertArgs<ExtArgs>>
    ): Prisma__FriendshipsClient<$Types.GetResult<FriendshipsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipsCountArgs} args - Arguments to filter Friendships to count.
     * @example
     * // Count the number of Friendships
     * const count = await prisma.friendships.count({
     *   where: {
     *     // ... the filter for the Friendships we want to count
     *   }
     * })
    **/
    count<T extends FriendshipsCountArgs>(
      args?: Subset<T, FriendshipsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FriendshipsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FriendshipsAggregateArgs>(args: Subset<T, FriendshipsAggregateArgs>): Prisma.PrismaPromise<GetFriendshipsAggregateType<T>>

    /**
     * Group by Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FriendshipsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FriendshipsGroupByArgs['orderBy'] }
        : { orderBy?: FriendshipsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FriendshipsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFriendshipsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Friendships model
   */
  readonly fields: FriendshipsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Friendships.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FriendshipsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user1<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    user2<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Friendships model
   */ 
  interface FriendshipsFieldRefs {
    readonly id: FieldRef<"Friendships", 'String'>
    readonly user1_id: FieldRef<"Friendships", 'String'>
    readonly user2_id: FieldRef<"Friendships", 'String'>
    readonly createdAt: FieldRef<"Friendships", 'DateTime'>
    readonly relationStatus: FieldRef<"Friendships", 'RelationStatus'>
  }
    

  // Custom InputTypes

  /**
   * Friendships findUnique
   */
  export type FriendshipsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendships
     */
    select?: FriendshipsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipsInclude<ExtArgs> | null
    /**
     * Filter, which Friendships to fetch.
     */
    where: FriendshipsWhereUniqueInput
  }


  /**
   * Friendships findUniqueOrThrow
   */
  export type FriendshipsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendships
     */
    select?: FriendshipsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipsInclude<ExtArgs> | null
    /**
     * Filter, which Friendships to fetch.
     */
    where: FriendshipsWhereUniqueInput
  }


  /**
   * Friendships findFirst
   */
  export type FriendshipsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendships
     */
    select?: FriendshipsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipsInclude<ExtArgs> | null
    /**
     * Filter, which Friendships to fetch.
     */
    where?: FriendshipsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipsOrderByWithRelationInput | FriendshipsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friendships.
     */
    cursor?: FriendshipsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friendships.
     */
    distinct?: FriendshipsScalarFieldEnum | FriendshipsScalarFieldEnum[]
  }


  /**
   * Friendships findFirstOrThrow
   */
  export type FriendshipsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendships
     */
    select?: FriendshipsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipsInclude<ExtArgs> | null
    /**
     * Filter, which Friendships to fetch.
     */
    where?: FriendshipsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipsOrderByWithRelationInput | FriendshipsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friendships.
     */
    cursor?: FriendshipsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friendships.
     */
    distinct?: FriendshipsScalarFieldEnum | FriendshipsScalarFieldEnum[]
  }


  /**
   * Friendships findMany
   */
  export type FriendshipsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendships
     */
    select?: FriendshipsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipsInclude<ExtArgs> | null
    /**
     * Filter, which Friendships to fetch.
     */
    where?: FriendshipsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipsOrderByWithRelationInput | FriendshipsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Friendships.
     */
    cursor?: FriendshipsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    distinct?: FriendshipsScalarFieldEnum | FriendshipsScalarFieldEnum[]
  }


  /**
   * Friendships create
   */
  export type FriendshipsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendships
     */
    select?: FriendshipsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipsInclude<ExtArgs> | null
    /**
     * The data needed to create a Friendships.
     */
    data: XOR<FriendshipsCreateInput, FriendshipsUncheckedCreateInput>
  }


  /**
   * Friendships createMany
   */
  export type FriendshipsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Friendships.
     */
    data: FriendshipsCreateManyInput | FriendshipsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Friendships update
   */
  export type FriendshipsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendships
     */
    select?: FriendshipsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipsInclude<ExtArgs> | null
    /**
     * The data needed to update a Friendships.
     */
    data: XOR<FriendshipsUpdateInput, FriendshipsUncheckedUpdateInput>
    /**
     * Choose, which Friendships to update.
     */
    where: FriendshipsWhereUniqueInput
  }


  /**
   * Friendships updateMany
   */
  export type FriendshipsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Friendships.
     */
    data: XOR<FriendshipsUpdateManyMutationInput, FriendshipsUncheckedUpdateManyInput>
    /**
     * Filter which Friendships to update
     */
    where?: FriendshipsWhereInput
  }


  /**
   * Friendships upsert
   */
  export type FriendshipsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendships
     */
    select?: FriendshipsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipsInclude<ExtArgs> | null
    /**
     * The filter to search for the Friendships to update in case it exists.
     */
    where: FriendshipsWhereUniqueInput
    /**
     * In case the Friendships found by the `where` argument doesn't exist, create a new Friendships with this data.
     */
    create: XOR<FriendshipsCreateInput, FriendshipsUncheckedCreateInput>
    /**
     * In case the Friendships was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FriendshipsUpdateInput, FriendshipsUncheckedUpdateInput>
  }


  /**
   * Friendships delete
   */
  export type FriendshipsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendships
     */
    select?: FriendshipsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipsInclude<ExtArgs> | null
    /**
     * Filter which Friendships to delete.
     */
    where: FriendshipsWhereUniqueInput
  }


  /**
   * Friendships deleteMany
   */
  export type FriendshipsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Friendships to delete
     */
    where?: FriendshipsWhereInput
  }


  /**
   * Friendships without action
   */
  export type FriendshipsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendships
     */
    select?: FriendshipsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipsInclude<ExtArgs> | null
  }



  /**
   * Model ChannelMembership
   */


  export type AggregateChannelMembership = {
    _count: ChannelMembershipCountAggregateOutputType | null
    _min: ChannelMembershipMinAggregateOutputType | null
    _max: ChannelMembershipMaxAggregateOutputType | null
  }

  export type ChannelMembershipMinAggregateOutputType = {
    id: string | null
    channel_id: string | null
    user_id: string | null
    role: Role | null
    joined_at: Date | null
    is_banned: boolean | null
    banned_at: Date | null
  }

  export type ChannelMembershipMaxAggregateOutputType = {
    id: string | null
    channel_id: string | null
    user_id: string | null
    role: Role | null
    joined_at: Date | null
    is_banned: boolean | null
    banned_at: Date | null
  }

  export type ChannelMembershipCountAggregateOutputType = {
    id: number
    channel_id: number
    user_id: number
    role: number
    joined_at: number
    is_banned: number
    banned_at: number
    _all: number
  }


  export type ChannelMembershipMinAggregateInputType = {
    id?: true
    channel_id?: true
    user_id?: true
    role?: true
    joined_at?: true
    is_banned?: true
    banned_at?: true
  }

  export type ChannelMembershipMaxAggregateInputType = {
    id?: true
    channel_id?: true
    user_id?: true
    role?: true
    joined_at?: true
    is_banned?: true
    banned_at?: true
  }

  export type ChannelMembershipCountAggregateInputType = {
    id?: true
    channel_id?: true
    user_id?: true
    role?: true
    joined_at?: true
    is_banned?: true
    banned_at?: true
    _all?: true
  }

  export type ChannelMembershipAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChannelMembership to aggregate.
     */
    where?: ChannelMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelMemberships to fetch.
     */
    orderBy?: ChannelMembershipOrderByWithRelationInput | ChannelMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChannelMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChannelMemberships
    **/
    _count?: true | ChannelMembershipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelMembershipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelMembershipMaxAggregateInputType
  }

  export type GetChannelMembershipAggregateType<T extends ChannelMembershipAggregateArgs> = {
        [P in keyof T & keyof AggregateChannelMembership]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannelMembership[P]>
      : GetScalarType<T[P], AggregateChannelMembership[P]>
  }




  export type ChannelMembershipGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChannelMembershipWhereInput
    orderBy?: ChannelMembershipOrderByWithAggregationInput | ChannelMembershipOrderByWithAggregationInput[]
    by: ChannelMembershipScalarFieldEnum[] | ChannelMembershipScalarFieldEnum
    having?: ChannelMembershipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelMembershipCountAggregateInputType | true
    _min?: ChannelMembershipMinAggregateInputType
    _max?: ChannelMembershipMaxAggregateInputType
  }


  export type ChannelMembershipGroupByOutputType = {
    id: string
    channel_id: string
    user_id: string
    role: Role
    joined_at: Date
    is_banned: boolean
    banned_at: Date | null
    _count: ChannelMembershipCountAggregateOutputType | null
    _min: ChannelMembershipMinAggregateOutputType | null
    _max: ChannelMembershipMaxAggregateOutputType | null
  }

  type GetChannelMembershipGroupByPayload<T extends ChannelMembershipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChannelMembershipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelMembershipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelMembershipGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelMembershipGroupByOutputType[P]>
        }
      >
    >


  export type ChannelMembershipSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    channel_id?: boolean
    user_id?: boolean
    role?: boolean
    joined_at?: boolean
    is_banned?: boolean
    banned_at?: boolean
    channel?: boolean | ChannelArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["channelMembership"]>

  export type ChannelMembershipSelectScalar = {
    id?: boolean
    channel_id?: boolean
    user_id?: boolean
    role?: boolean
    joined_at?: boolean
    is_banned?: boolean
    banned_at?: boolean
  }

  export type ChannelMembershipInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    channel?: boolean | ChannelArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
  }


  type ChannelMembershipGetPayload<S extends boolean | null | undefined | ChannelMembershipArgs> = $Types.GetResult<ChannelMembershipPayload, S>

  type ChannelMembershipCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ChannelMembershipFindManyArgs, 'select' | 'include'> & {
      select?: ChannelMembershipCountAggregateInputType | true
    }

  export interface ChannelMembershipDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChannelMembership'], meta: { name: 'ChannelMembership' } }
    /**
     * Find zero or one ChannelMembership that matches the filter.
     * @param {ChannelMembershipFindUniqueArgs} args - Arguments to find a ChannelMembership
     * @example
     * // Get one ChannelMembership
     * const channelMembership = await prisma.channelMembership.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChannelMembershipFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelMembershipFindUniqueArgs<ExtArgs>>
    ): Prisma__ChannelMembershipClient<$Types.GetResult<ChannelMembershipPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ChannelMembership that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChannelMembershipFindUniqueOrThrowArgs} args - Arguments to find a ChannelMembership
     * @example
     * // Get one ChannelMembership
     * const channelMembership = await prisma.channelMembership.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChannelMembershipFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelMembershipFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelMembershipClient<$Types.GetResult<ChannelMembershipPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ChannelMembership that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelMembershipFindFirstArgs} args - Arguments to find a ChannelMembership
     * @example
     * // Get one ChannelMembership
     * const channelMembership = await prisma.channelMembership.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChannelMembershipFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelMembershipFindFirstArgs<ExtArgs>>
    ): Prisma__ChannelMembershipClient<$Types.GetResult<ChannelMembershipPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ChannelMembership that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelMembershipFindFirstOrThrowArgs} args - Arguments to find a ChannelMembership
     * @example
     * // Get one ChannelMembership
     * const channelMembership = await prisma.channelMembership.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChannelMembershipFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelMembershipFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelMembershipClient<$Types.GetResult<ChannelMembershipPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ChannelMemberships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelMembershipFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChannelMemberships
     * const channelMemberships = await prisma.channelMembership.findMany()
     * 
     * // Get first 10 ChannelMemberships
     * const channelMemberships = await prisma.channelMembership.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const channelMembershipWithIdOnly = await prisma.channelMembership.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChannelMembershipFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelMembershipFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ChannelMembershipPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ChannelMembership.
     * @param {ChannelMembershipCreateArgs} args - Arguments to create a ChannelMembership.
     * @example
     * // Create one ChannelMembership
     * const ChannelMembership = await prisma.channelMembership.create({
     *   data: {
     *     // ... data to create a ChannelMembership
     *   }
     * })
     * 
    **/
    create<T extends ChannelMembershipCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelMembershipCreateArgs<ExtArgs>>
    ): Prisma__ChannelMembershipClient<$Types.GetResult<ChannelMembershipPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ChannelMemberships.
     *     @param {ChannelMembershipCreateManyArgs} args - Arguments to create many ChannelMemberships.
     *     @example
     *     // Create many ChannelMemberships
     *     const channelMembership = await prisma.channelMembership.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChannelMembershipCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelMembershipCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChannelMembership.
     * @param {ChannelMembershipDeleteArgs} args - Arguments to delete one ChannelMembership.
     * @example
     * // Delete one ChannelMembership
     * const ChannelMembership = await prisma.channelMembership.delete({
     *   where: {
     *     // ... filter to delete one ChannelMembership
     *   }
     * })
     * 
    **/
    delete<T extends ChannelMembershipDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelMembershipDeleteArgs<ExtArgs>>
    ): Prisma__ChannelMembershipClient<$Types.GetResult<ChannelMembershipPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ChannelMembership.
     * @param {ChannelMembershipUpdateArgs} args - Arguments to update one ChannelMembership.
     * @example
     * // Update one ChannelMembership
     * const channelMembership = await prisma.channelMembership.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChannelMembershipUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelMembershipUpdateArgs<ExtArgs>>
    ): Prisma__ChannelMembershipClient<$Types.GetResult<ChannelMembershipPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ChannelMemberships.
     * @param {ChannelMembershipDeleteManyArgs} args - Arguments to filter ChannelMemberships to delete.
     * @example
     * // Delete a few ChannelMemberships
     * const { count } = await prisma.channelMembership.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChannelMembershipDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelMembershipDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChannelMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelMembershipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChannelMemberships
     * const channelMembership = await prisma.channelMembership.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChannelMembershipUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelMembershipUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChannelMembership.
     * @param {ChannelMembershipUpsertArgs} args - Arguments to update or create a ChannelMembership.
     * @example
     * // Update or create a ChannelMembership
     * const channelMembership = await prisma.channelMembership.upsert({
     *   create: {
     *     // ... data to create a ChannelMembership
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChannelMembership we want to update
     *   }
     * })
    **/
    upsert<T extends ChannelMembershipUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelMembershipUpsertArgs<ExtArgs>>
    ): Prisma__ChannelMembershipClient<$Types.GetResult<ChannelMembershipPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ChannelMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelMembershipCountArgs} args - Arguments to filter ChannelMemberships to count.
     * @example
     * // Count the number of ChannelMemberships
     * const count = await prisma.channelMembership.count({
     *   where: {
     *     // ... the filter for the ChannelMemberships we want to count
     *   }
     * })
    **/
    count<T extends ChannelMembershipCountArgs>(
      args?: Subset<T, ChannelMembershipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelMembershipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChannelMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelMembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelMembershipAggregateArgs>(args: Subset<T, ChannelMembershipAggregateArgs>): Prisma.PrismaPromise<GetChannelMembershipAggregateType<T>>

    /**
     * Group by ChannelMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelMembershipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChannelMembershipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChannelMembershipGroupByArgs['orderBy'] }
        : { orderBy?: ChannelMembershipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChannelMembershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelMembershipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChannelMembership model
   */
  readonly fields: ChannelMembershipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChannelMembership.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChannelMembershipClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    channel<T extends ChannelArgs<ExtArgs> = {}>(args?: Subset<T, ChannelArgs<ExtArgs>>): Prisma__ChannelClient<$Types.GetResult<ChannelPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the ChannelMembership model
   */ 
  interface ChannelMembershipFieldRefs {
    readonly id: FieldRef<"ChannelMembership", 'String'>
    readonly channel_id: FieldRef<"ChannelMembership", 'String'>
    readonly user_id: FieldRef<"ChannelMembership", 'String'>
    readonly role: FieldRef<"ChannelMembership", 'Role'>
    readonly joined_at: FieldRef<"ChannelMembership", 'DateTime'>
    readonly is_banned: FieldRef<"ChannelMembership", 'Boolean'>
    readonly banned_at: FieldRef<"ChannelMembership", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * ChannelMembership findUnique
   */
  export type ChannelMembershipFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMembership
     */
    select?: ChannelMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMembershipInclude<ExtArgs> | null
    /**
     * Filter, which ChannelMembership to fetch.
     */
    where: ChannelMembershipWhereUniqueInput
  }


  /**
   * ChannelMembership findUniqueOrThrow
   */
  export type ChannelMembershipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMembership
     */
    select?: ChannelMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMembershipInclude<ExtArgs> | null
    /**
     * Filter, which ChannelMembership to fetch.
     */
    where: ChannelMembershipWhereUniqueInput
  }


  /**
   * ChannelMembership findFirst
   */
  export type ChannelMembershipFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMembership
     */
    select?: ChannelMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMembershipInclude<ExtArgs> | null
    /**
     * Filter, which ChannelMembership to fetch.
     */
    where?: ChannelMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelMemberships to fetch.
     */
    orderBy?: ChannelMembershipOrderByWithRelationInput | ChannelMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChannelMemberships.
     */
    cursor?: ChannelMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChannelMemberships.
     */
    distinct?: ChannelMembershipScalarFieldEnum | ChannelMembershipScalarFieldEnum[]
  }


  /**
   * ChannelMembership findFirstOrThrow
   */
  export type ChannelMembershipFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMembership
     */
    select?: ChannelMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMembershipInclude<ExtArgs> | null
    /**
     * Filter, which ChannelMembership to fetch.
     */
    where?: ChannelMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelMemberships to fetch.
     */
    orderBy?: ChannelMembershipOrderByWithRelationInput | ChannelMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChannelMemberships.
     */
    cursor?: ChannelMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChannelMemberships.
     */
    distinct?: ChannelMembershipScalarFieldEnum | ChannelMembershipScalarFieldEnum[]
  }


  /**
   * ChannelMembership findMany
   */
  export type ChannelMembershipFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMembership
     */
    select?: ChannelMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMembershipInclude<ExtArgs> | null
    /**
     * Filter, which ChannelMemberships to fetch.
     */
    where?: ChannelMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelMemberships to fetch.
     */
    orderBy?: ChannelMembershipOrderByWithRelationInput | ChannelMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChannelMemberships.
     */
    cursor?: ChannelMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelMemberships.
     */
    skip?: number
    distinct?: ChannelMembershipScalarFieldEnum | ChannelMembershipScalarFieldEnum[]
  }


  /**
   * ChannelMembership create
   */
  export type ChannelMembershipCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMembership
     */
    select?: ChannelMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMembershipInclude<ExtArgs> | null
    /**
     * The data needed to create a ChannelMembership.
     */
    data: XOR<ChannelMembershipCreateInput, ChannelMembershipUncheckedCreateInput>
  }


  /**
   * ChannelMembership createMany
   */
  export type ChannelMembershipCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChannelMemberships.
     */
    data: ChannelMembershipCreateManyInput | ChannelMembershipCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ChannelMembership update
   */
  export type ChannelMembershipUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMembership
     */
    select?: ChannelMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMembershipInclude<ExtArgs> | null
    /**
     * The data needed to update a ChannelMembership.
     */
    data: XOR<ChannelMembershipUpdateInput, ChannelMembershipUncheckedUpdateInput>
    /**
     * Choose, which ChannelMembership to update.
     */
    where: ChannelMembershipWhereUniqueInput
  }


  /**
   * ChannelMembership updateMany
   */
  export type ChannelMembershipUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChannelMemberships.
     */
    data: XOR<ChannelMembershipUpdateManyMutationInput, ChannelMembershipUncheckedUpdateManyInput>
    /**
     * Filter which ChannelMemberships to update
     */
    where?: ChannelMembershipWhereInput
  }


  /**
   * ChannelMembership upsert
   */
  export type ChannelMembershipUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMembership
     */
    select?: ChannelMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMembershipInclude<ExtArgs> | null
    /**
     * The filter to search for the ChannelMembership to update in case it exists.
     */
    where: ChannelMembershipWhereUniqueInput
    /**
     * In case the ChannelMembership found by the `where` argument doesn't exist, create a new ChannelMembership with this data.
     */
    create: XOR<ChannelMembershipCreateInput, ChannelMembershipUncheckedCreateInput>
    /**
     * In case the ChannelMembership was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChannelMembershipUpdateInput, ChannelMembershipUncheckedUpdateInput>
  }


  /**
   * ChannelMembership delete
   */
  export type ChannelMembershipDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMembership
     */
    select?: ChannelMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMembershipInclude<ExtArgs> | null
    /**
     * Filter which ChannelMembership to delete.
     */
    where: ChannelMembershipWhereUniqueInput
  }


  /**
   * ChannelMembership deleteMany
   */
  export type ChannelMembershipDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChannelMemberships to delete
     */
    where?: ChannelMembershipWhereInput
  }


  /**
   * ChannelMembership without action
   */
  export type ChannelMembershipArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMembership
     */
    select?: ChannelMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMembershipInclude<ExtArgs> | null
  }



  /**
   * Model Message
   */


  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    channel_id: string | null
    dm_id: string | null
    content: string | null
    createdAt: Date | null
    is_read: boolean | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    channel_id: string | null
    dm_id: string | null
    content: string | null
    createdAt: Date | null
    is_read: boolean | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    user_id: number
    channel_id: number
    dm_id: number
    content: number
    createdAt: number
    is_read: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    user_id?: true
    channel_id?: true
    dm_id?: true
    content?: true
    createdAt?: true
    is_read?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    user_id?: true
    channel_id?: true
    dm_id?: true
    content?: true
    createdAt?: true
    is_read?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    user_id?: true
    channel_id?: true
    dm_id?: true
    content?: true
    createdAt?: true
    is_read?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }


  export type MessageGroupByOutputType = {
    id: string
    user_id: string
    channel_id: string | null
    dm_id: string | null
    content: string
    createdAt: Date | null
    is_read: boolean | null
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    channel_id?: boolean
    dm_id?: boolean
    content?: boolean
    createdAt?: boolean
    is_read?: boolean
    user?: boolean | UserArgs<ExtArgs>
    channel?: boolean | Message$channelArgs<ExtArgs>
    dm?: boolean | Message$dmArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    user_id?: boolean
    channel_id?: boolean
    dm_id?: boolean
    content?: boolean
    createdAt?: boolean
    is_read?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    channel?: boolean | Message$channelArgs<ExtArgs>
    dm?: boolean | Message$dmArgs<ExtArgs>
  }


  type MessageGetPayload<S extends boolean | null | undefined | MessageArgs> = $Types.GetResult<MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MessageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
    **/
    create<T extends MessageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageCreateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Messages.
     *     @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const message = await prisma.message.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
    **/
    delete<T extends MessageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
    **/
    upsert<T extends MessageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    channel<T extends Message$channelArgs<ExtArgs> = {}>(args?: Subset<T, Message$channelArgs<ExtArgs>>): Prisma__ChannelClient<$Types.GetResult<ChannelPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    dm<T extends Message$dmArgs<ExtArgs> = {}>(args?: Subset<T, Message$dmArgs<ExtArgs>>): Prisma__DirectMessagingClient<$Types.GetResult<DirectMessagingPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly user_id: FieldRef<"Message", 'String'>
    readonly channel_id: FieldRef<"Message", 'String'>
    readonly dm_id: FieldRef<"Message", 'String'>
    readonly content: FieldRef<"Message", 'String'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
    readonly is_read: FieldRef<"Message", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }


  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }


  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }


  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }


  /**
   * Message.channel
   */
  export type Message$channelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    where?: ChannelWhereInput
  }


  /**
   * Message.dm
   */
  export type Message$dmArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessaging
     */
    select?: DirectMessagingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMessagingInclude<ExtArgs> | null
    where?: DirectMessagingWhereInput
  }


  /**
   * Message without action
   */
  export type MessageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
  }



  /**
   * Model Channel
   */


  export type AggregateChannel = {
    _count: ChannelCountAggregateOutputType | null
    _min: ChannelMinAggregateOutputType | null
    _max: ChannelMaxAggregateOutputType | null
  }

  export type ChannelMinAggregateOutputType = {
    id: string | null
    type: Channel_type | null
    name: string | null
    image: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChannelMaxAggregateOutputType = {
    id: string | null
    type: Channel_type | null
    name: string | null
    image: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChannelCountAggregateOutputType = {
    id: number
    type: number
    name: number
    image: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChannelMinAggregateInputType = {
    id?: true
    type?: true
    name?: true
    image?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChannelMaxAggregateInputType = {
    id?: true
    type?: true
    name?: true
    image?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChannelCountAggregateInputType = {
    id?: true
    type?: true
    name?: true
    image?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChannelAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Channel to aggregate.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Channels
    **/
    _count?: true | ChannelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelMaxAggregateInputType
  }

  export type GetChannelAggregateType<T extends ChannelAggregateArgs> = {
        [P in keyof T & keyof AggregateChannel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannel[P]>
      : GetScalarType<T[P], AggregateChannel[P]>
  }




  export type ChannelGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChannelWhereInput
    orderBy?: ChannelOrderByWithAggregationInput | ChannelOrderByWithAggregationInput[]
    by: ChannelScalarFieldEnum[] | ChannelScalarFieldEnum
    having?: ChannelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelCountAggregateInputType | true
    _min?: ChannelMinAggregateInputType
    _max?: ChannelMaxAggregateInputType
  }


  export type ChannelGroupByOutputType = {
    id: string
    type: Channel_type
    name: string
    image: string
    password: string | null
    createdAt: Date
    updatedAt: Date
    _count: ChannelCountAggregateOutputType | null
    _min: ChannelMinAggregateOutputType | null
    _max: ChannelMaxAggregateOutputType | null
  }

  type GetChannelGroupByPayload<T extends ChannelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChannelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelGroupByOutputType[P]>
        }
      >
    >


  export type ChannelSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    name?: boolean
    image?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    memeberShips?: boolean | Channel$memeberShipsArgs<ExtArgs>
    messages?: boolean | Channel$messagesArgs<ExtArgs>
    _count?: boolean | ChannelCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["channel"]>

  export type ChannelSelectScalar = {
    id?: boolean
    type?: boolean
    name?: boolean
    image?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChannelInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    memeberShips?: boolean | Channel$memeberShipsArgs<ExtArgs>
    messages?: boolean | Channel$messagesArgs<ExtArgs>
    _count?: boolean | ChannelCountOutputTypeArgs<ExtArgs>
  }


  type ChannelGetPayload<S extends boolean | null | undefined | ChannelArgs> = $Types.GetResult<ChannelPayload, S>

  type ChannelCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ChannelFindManyArgs, 'select' | 'include'> & {
      select?: ChannelCountAggregateInputType | true
    }

  export interface ChannelDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Channel'], meta: { name: 'Channel' } }
    /**
     * Find zero or one Channel that matches the filter.
     * @param {ChannelFindUniqueArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChannelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelFindUniqueArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Types.GetResult<ChannelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Channel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChannelFindUniqueOrThrowArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChannelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Types.GetResult<ChannelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Channel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindFirstArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChannelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindFirstArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Types.GetResult<ChannelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Channel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindFirstOrThrowArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChannelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Types.GetResult<ChannelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Channels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Channels
     * const channels = await prisma.channel.findMany()
     * 
     * // Get first 10 Channels
     * const channels = await prisma.channel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const channelWithIdOnly = await prisma.channel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChannelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ChannelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Channel.
     * @param {ChannelCreateArgs} args - Arguments to create a Channel.
     * @example
     * // Create one Channel
     * const Channel = await prisma.channel.create({
     *   data: {
     *     // ... data to create a Channel
     *   }
     * })
     * 
    **/
    create<T extends ChannelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelCreateArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Types.GetResult<ChannelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Channels.
     *     @param {ChannelCreateManyArgs} args - Arguments to create many Channels.
     *     @example
     *     // Create many Channels
     *     const channel = await prisma.channel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChannelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Channel.
     * @param {ChannelDeleteArgs} args - Arguments to delete one Channel.
     * @example
     * // Delete one Channel
     * const Channel = await prisma.channel.delete({
     *   where: {
     *     // ... filter to delete one Channel
     *   }
     * })
     * 
    **/
    delete<T extends ChannelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelDeleteArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Types.GetResult<ChannelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Channel.
     * @param {ChannelUpdateArgs} args - Arguments to update one Channel.
     * @example
     * // Update one Channel
     * const channel = await prisma.channel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChannelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUpdateArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Types.GetResult<ChannelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Channels.
     * @param {ChannelDeleteManyArgs} args - Arguments to filter Channels to delete.
     * @example
     * // Delete a few Channels
     * const { count } = await prisma.channel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChannelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Channels
     * const channel = await prisma.channel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChannelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Channel.
     * @param {ChannelUpsertArgs} args - Arguments to update or create a Channel.
     * @example
     * // Update or create a Channel
     * const channel = await prisma.channel.upsert({
     *   create: {
     *     // ... data to create a Channel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Channel we want to update
     *   }
     * })
    **/
    upsert<T extends ChannelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUpsertArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Types.GetResult<ChannelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelCountArgs} args - Arguments to filter Channels to count.
     * @example
     * // Count the number of Channels
     * const count = await prisma.channel.count({
     *   where: {
     *     // ... the filter for the Channels we want to count
     *   }
     * })
    **/
    count<T extends ChannelCountArgs>(
      args?: Subset<T, ChannelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Channel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelAggregateArgs>(args: Subset<T, ChannelAggregateArgs>): Prisma.PrismaPromise<GetChannelAggregateType<T>>

    /**
     * Group by Channel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChannelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChannelGroupByArgs['orderBy'] }
        : { orderBy?: ChannelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChannelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Channel model
   */
  readonly fields: ChannelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Channel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChannelClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    memeberShips<T extends Channel$memeberShipsArgs<ExtArgs> = {}>(args?: Subset<T, Channel$memeberShipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ChannelMembershipPayload<ExtArgs>, T, 'findMany'>| Null>;

    messages<T extends Channel$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Channel$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Channel model
   */ 
  interface ChannelFieldRefs {
    readonly id: FieldRef<"Channel", 'String'>
    readonly type: FieldRef<"Channel", 'Channel_type'>
    readonly name: FieldRef<"Channel", 'String'>
    readonly image: FieldRef<"Channel", 'String'>
    readonly password: FieldRef<"Channel", 'String'>
    readonly createdAt: FieldRef<"Channel", 'DateTime'>
    readonly updatedAt: FieldRef<"Channel", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Channel findUnique
   */
  export type ChannelFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel findUniqueOrThrow
   */
  export type ChannelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel findFirst
   */
  export type ChannelFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }


  /**
   * Channel findFirstOrThrow
   */
  export type ChannelFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }


  /**
   * Channel findMany
   */
  export type ChannelFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channels to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }


  /**
   * Channel create
   */
  export type ChannelCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * The data needed to create a Channel.
     */
    data: XOR<ChannelCreateInput, ChannelUncheckedCreateInput>
  }


  /**
   * Channel createMany
   */
  export type ChannelCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Channels.
     */
    data: ChannelCreateManyInput | ChannelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Channel update
   */
  export type ChannelUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * The data needed to update a Channel.
     */
    data: XOR<ChannelUpdateInput, ChannelUncheckedUpdateInput>
    /**
     * Choose, which Channel to update.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel updateMany
   */
  export type ChannelUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Channels.
     */
    data: XOR<ChannelUpdateManyMutationInput, ChannelUncheckedUpdateManyInput>
    /**
     * Filter which Channels to update
     */
    where?: ChannelWhereInput
  }


  /**
   * Channel upsert
   */
  export type ChannelUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * The filter to search for the Channel to update in case it exists.
     */
    where: ChannelWhereUniqueInput
    /**
     * In case the Channel found by the `where` argument doesn't exist, create a new Channel with this data.
     */
    create: XOR<ChannelCreateInput, ChannelUncheckedCreateInput>
    /**
     * In case the Channel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChannelUpdateInput, ChannelUncheckedUpdateInput>
  }


  /**
   * Channel delete
   */
  export type ChannelDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter which Channel to delete.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel deleteMany
   */
  export type ChannelDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Channels to delete
     */
    where?: ChannelWhereInput
  }


  /**
   * Channel.memeberShips
   */
  export type Channel$memeberShipsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMembership
     */
    select?: ChannelMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMembershipInclude<ExtArgs> | null
    where?: ChannelMembershipWhereInput
    orderBy?: ChannelMembershipOrderByWithRelationInput | ChannelMembershipOrderByWithRelationInput[]
    cursor?: ChannelMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChannelMembershipScalarFieldEnum | ChannelMembershipScalarFieldEnum[]
  }


  /**
   * Channel.messages
   */
  export type Channel$messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Channel without action
   */
  export type ChannelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
  }



  /**
   * Model DirectMessaging
   */


  export type AggregateDirectMessaging = {
    _count: DirectMessagingCountAggregateOutputType | null
    _min: DirectMessagingMinAggregateOutputType | null
    _max: DirectMessagingMaxAggregateOutputType | null
  }

  export type DirectMessagingMinAggregateOutputType = {
    id: string | null
    user1_id: string | null
    user2_id: string | null
    status: DmStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DirectMessagingMaxAggregateOutputType = {
    id: string | null
    user1_id: string | null
    user2_id: string | null
    status: DmStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DirectMessagingCountAggregateOutputType = {
    id: number
    user1_id: number
    user2_id: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DirectMessagingMinAggregateInputType = {
    id?: true
    user1_id?: true
    user2_id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DirectMessagingMaxAggregateInputType = {
    id?: true
    user1_id?: true
    user2_id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DirectMessagingCountAggregateInputType = {
    id?: true
    user1_id?: true
    user2_id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DirectMessagingAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which DirectMessaging to aggregate.
     */
    where?: DirectMessagingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DirectMessagings to fetch.
     */
    orderBy?: DirectMessagingOrderByWithRelationInput | DirectMessagingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DirectMessagingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DirectMessagings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DirectMessagings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DirectMessagings
    **/
    _count?: true | DirectMessagingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DirectMessagingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DirectMessagingMaxAggregateInputType
  }

  export type GetDirectMessagingAggregateType<T extends DirectMessagingAggregateArgs> = {
        [P in keyof T & keyof AggregateDirectMessaging]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDirectMessaging[P]>
      : GetScalarType<T[P], AggregateDirectMessaging[P]>
  }




  export type DirectMessagingGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DirectMessagingWhereInput
    orderBy?: DirectMessagingOrderByWithAggregationInput | DirectMessagingOrderByWithAggregationInput[]
    by: DirectMessagingScalarFieldEnum[] | DirectMessagingScalarFieldEnum
    having?: DirectMessagingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DirectMessagingCountAggregateInputType | true
    _min?: DirectMessagingMinAggregateInputType
    _max?: DirectMessagingMaxAggregateInputType
  }


  export type DirectMessagingGroupByOutputType = {
    id: string
    user1_id: string
    user2_id: string
    status: DmStatus
    createdAt: Date
    updatedAt: Date
    _count: DirectMessagingCountAggregateOutputType | null
    _min: DirectMessagingMinAggregateOutputType | null
    _max: DirectMessagingMaxAggregateOutputType | null
  }

  type GetDirectMessagingGroupByPayload<T extends DirectMessagingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DirectMessagingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DirectMessagingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DirectMessagingGroupByOutputType[P]>
            : GetScalarType<T[P], DirectMessagingGroupByOutputType[P]>
        }
      >
    >


  export type DirectMessagingSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user1_id?: boolean
    user2_id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user1?: boolean | UserArgs<ExtArgs>
    user2?: boolean | UserArgs<ExtArgs>
    messages?: boolean | DirectMessaging$messagesArgs<ExtArgs>
    _count?: boolean | DirectMessagingCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["directMessaging"]>

  export type DirectMessagingSelectScalar = {
    id?: boolean
    user1_id?: boolean
    user2_id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DirectMessagingInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user1?: boolean | UserArgs<ExtArgs>
    user2?: boolean | UserArgs<ExtArgs>
    messages?: boolean | DirectMessaging$messagesArgs<ExtArgs>
    _count?: boolean | DirectMessagingCountOutputTypeArgs<ExtArgs>
  }


  type DirectMessagingGetPayload<S extends boolean | null | undefined | DirectMessagingArgs> = $Types.GetResult<DirectMessagingPayload, S>

  type DirectMessagingCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DirectMessagingFindManyArgs, 'select' | 'include'> & {
      select?: DirectMessagingCountAggregateInputType | true
    }

  export interface DirectMessagingDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DirectMessaging'], meta: { name: 'DirectMessaging' } }
    /**
     * Find zero or one DirectMessaging that matches the filter.
     * @param {DirectMessagingFindUniqueArgs} args - Arguments to find a DirectMessaging
     * @example
     * // Get one DirectMessaging
     * const directMessaging = await prisma.directMessaging.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DirectMessagingFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DirectMessagingFindUniqueArgs<ExtArgs>>
    ): Prisma__DirectMessagingClient<$Types.GetResult<DirectMessagingPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DirectMessaging that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DirectMessagingFindUniqueOrThrowArgs} args - Arguments to find a DirectMessaging
     * @example
     * // Get one DirectMessaging
     * const directMessaging = await prisma.directMessaging.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DirectMessagingFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DirectMessagingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DirectMessagingClient<$Types.GetResult<DirectMessagingPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DirectMessaging that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessagingFindFirstArgs} args - Arguments to find a DirectMessaging
     * @example
     * // Get one DirectMessaging
     * const directMessaging = await prisma.directMessaging.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DirectMessagingFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DirectMessagingFindFirstArgs<ExtArgs>>
    ): Prisma__DirectMessagingClient<$Types.GetResult<DirectMessagingPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DirectMessaging that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessagingFindFirstOrThrowArgs} args - Arguments to find a DirectMessaging
     * @example
     * // Get one DirectMessaging
     * const directMessaging = await prisma.directMessaging.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DirectMessagingFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DirectMessagingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DirectMessagingClient<$Types.GetResult<DirectMessagingPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DirectMessagings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessagingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DirectMessagings
     * const directMessagings = await prisma.directMessaging.findMany()
     * 
     * // Get first 10 DirectMessagings
     * const directMessagings = await prisma.directMessaging.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const directMessagingWithIdOnly = await prisma.directMessaging.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DirectMessagingFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DirectMessagingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<DirectMessagingPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DirectMessaging.
     * @param {DirectMessagingCreateArgs} args - Arguments to create a DirectMessaging.
     * @example
     * // Create one DirectMessaging
     * const DirectMessaging = await prisma.directMessaging.create({
     *   data: {
     *     // ... data to create a DirectMessaging
     *   }
     * })
     * 
    **/
    create<T extends DirectMessagingCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DirectMessagingCreateArgs<ExtArgs>>
    ): Prisma__DirectMessagingClient<$Types.GetResult<DirectMessagingPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DirectMessagings.
     *     @param {DirectMessagingCreateManyArgs} args - Arguments to create many DirectMessagings.
     *     @example
     *     // Create many DirectMessagings
     *     const directMessaging = await prisma.directMessaging.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DirectMessagingCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DirectMessagingCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DirectMessaging.
     * @param {DirectMessagingDeleteArgs} args - Arguments to delete one DirectMessaging.
     * @example
     * // Delete one DirectMessaging
     * const DirectMessaging = await prisma.directMessaging.delete({
     *   where: {
     *     // ... filter to delete one DirectMessaging
     *   }
     * })
     * 
    **/
    delete<T extends DirectMessagingDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DirectMessagingDeleteArgs<ExtArgs>>
    ): Prisma__DirectMessagingClient<$Types.GetResult<DirectMessagingPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DirectMessaging.
     * @param {DirectMessagingUpdateArgs} args - Arguments to update one DirectMessaging.
     * @example
     * // Update one DirectMessaging
     * const directMessaging = await prisma.directMessaging.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DirectMessagingUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DirectMessagingUpdateArgs<ExtArgs>>
    ): Prisma__DirectMessagingClient<$Types.GetResult<DirectMessagingPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DirectMessagings.
     * @param {DirectMessagingDeleteManyArgs} args - Arguments to filter DirectMessagings to delete.
     * @example
     * // Delete a few DirectMessagings
     * const { count } = await prisma.directMessaging.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DirectMessagingDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DirectMessagingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DirectMessagings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessagingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DirectMessagings
     * const directMessaging = await prisma.directMessaging.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DirectMessagingUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DirectMessagingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DirectMessaging.
     * @param {DirectMessagingUpsertArgs} args - Arguments to update or create a DirectMessaging.
     * @example
     * // Update or create a DirectMessaging
     * const directMessaging = await prisma.directMessaging.upsert({
     *   create: {
     *     // ... data to create a DirectMessaging
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DirectMessaging we want to update
     *   }
     * })
    **/
    upsert<T extends DirectMessagingUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DirectMessagingUpsertArgs<ExtArgs>>
    ): Prisma__DirectMessagingClient<$Types.GetResult<DirectMessagingPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of DirectMessagings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessagingCountArgs} args - Arguments to filter DirectMessagings to count.
     * @example
     * // Count the number of DirectMessagings
     * const count = await prisma.directMessaging.count({
     *   where: {
     *     // ... the filter for the DirectMessagings we want to count
     *   }
     * })
    **/
    count<T extends DirectMessagingCountArgs>(
      args?: Subset<T, DirectMessagingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DirectMessagingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DirectMessaging.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessagingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DirectMessagingAggregateArgs>(args: Subset<T, DirectMessagingAggregateArgs>): Prisma.PrismaPromise<GetDirectMessagingAggregateType<T>>

    /**
     * Group by DirectMessaging.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessagingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DirectMessagingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DirectMessagingGroupByArgs['orderBy'] }
        : { orderBy?: DirectMessagingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DirectMessagingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDirectMessagingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DirectMessaging model
   */
  readonly fields: DirectMessagingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DirectMessaging.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DirectMessagingClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user1<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    user2<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    messages<T extends DirectMessaging$messagesArgs<ExtArgs> = {}>(args?: Subset<T, DirectMessaging$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the DirectMessaging model
   */ 
  interface DirectMessagingFieldRefs {
    readonly id: FieldRef<"DirectMessaging", 'String'>
    readonly user1_id: FieldRef<"DirectMessaging", 'String'>
    readonly user2_id: FieldRef<"DirectMessaging", 'String'>
    readonly status: FieldRef<"DirectMessaging", 'DmStatus'>
    readonly createdAt: FieldRef<"DirectMessaging", 'DateTime'>
    readonly updatedAt: FieldRef<"DirectMessaging", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * DirectMessaging findUnique
   */
  export type DirectMessagingFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessaging
     */
    select?: DirectMessagingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMessagingInclude<ExtArgs> | null
    /**
     * Filter, which DirectMessaging to fetch.
     */
    where: DirectMessagingWhereUniqueInput
  }


  /**
   * DirectMessaging findUniqueOrThrow
   */
  export type DirectMessagingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessaging
     */
    select?: DirectMessagingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMessagingInclude<ExtArgs> | null
    /**
     * Filter, which DirectMessaging to fetch.
     */
    where: DirectMessagingWhereUniqueInput
  }


  /**
   * DirectMessaging findFirst
   */
  export type DirectMessagingFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessaging
     */
    select?: DirectMessagingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMessagingInclude<ExtArgs> | null
    /**
     * Filter, which DirectMessaging to fetch.
     */
    where?: DirectMessagingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DirectMessagings to fetch.
     */
    orderBy?: DirectMessagingOrderByWithRelationInput | DirectMessagingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DirectMessagings.
     */
    cursor?: DirectMessagingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DirectMessagings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DirectMessagings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DirectMessagings.
     */
    distinct?: DirectMessagingScalarFieldEnum | DirectMessagingScalarFieldEnum[]
  }


  /**
   * DirectMessaging findFirstOrThrow
   */
  export type DirectMessagingFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessaging
     */
    select?: DirectMessagingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMessagingInclude<ExtArgs> | null
    /**
     * Filter, which DirectMessaging to fetch.
     */
    where?: DirectMessagingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DirectMessagings to fetch.
     */
    orderBy?: DirectMessagingOrderByWithRelationInput | DirectMessagingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DirectMessagings.
     */
    cursor?: DirectMessagingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DirectMessagings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DirectMessagings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DirectMessagings.
     */
    distinct?: DirectMessagingScalarFieldEnum | DirectMessagingScalarFieldEnum[]
  }


  /**
   * DirectMessaging findMany
   */
  export type DirectMessagingFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessaging
     */
    select?: DirectMessagingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMessagingInclude<ExtArgs> | null
    /**
     * Filter, which DirectMessagings to fetch.
     */
    where?: DirectMessagingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DirectMessagings to fetch.
     */
    orderBy?: DirectMessagingOrderByWithRelationInput | DirectMessagingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DirectMessagings.
     */
    cursor?: DirectMessagingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DirectMessagings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DirectMessagings.
     */
    skip?: number
    distinct?: DirectMessagingScalarFieldEnum | DirectMessagingScalarFieldEnum[]
  }


  /**
   * DirectMessaging create
   */
  export type DirectMessagingCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessaging
     */
    select?: DirectMessagingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMessagingInclude<ExtArgs> | null
    /**
     * The data needed to create a DirectMessaging.
     */
    data: XOR<DirectMessagingCreateInput, DirectMessagingUncheckedCreateInput>
  }


  /**
   * DirectMessaging createMany
   */
  export type DirectMessagingCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DirectMessagings.
     */
    data: DirectMessagingCreateManyInput | DirectMessagingCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * DirectMessaging update
   */
  export type DirectMessagingUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessaging
     */
    select?: DirectMessagingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMessagingInclude<ExtArgs> | null
    /**
     * The data needed to update a DirectMessaging.
     */
    data: XOR<DirectMessagingUpdateInput, DirectMessagingUncheckedUpdateInput>
    /**
     * Choose, which DirectMessaging to update.
     */
    where: DirectMessagingWhereUniqueInput
  }


  /**
   * DirectMessaging updateMany
   */
  export type DirectMessagingUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DirectMessagings.
     */
    data: XOR<DirectMessagingUpdateManyMutationInput, DirectMessagingUncheckedUpdateManyInput>
    /**
     * Filter which DirectMessagings to update
     */
    where?: DirectMessagingWhereInput
  }


  /**
   * DirectMessaging upsert
   */
  export type DirectMessagingUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessaging
     */
    select?: DirectMessagingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMessagingInclude<ExtArgs> | null
    /**
     * The filter to search for the DirectMessaging to update in case it exists.
     */
    where: DirectMessagingWhereUniqueInput
    /**
     * In case the DirectMessaging found by the `where` argument doesn't exist, create a new DirectMessaging with this data.
     */
    create: XOR<DirectMessagingCreateInput, DirectMessagingUncheckedCreateInput>
    /**
     * In case the DirectMessaging was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DirectMessagingUpdateInput, DirectMessagingUncheckedUpdateInput>
  }


  /**
   * DirectMessaging delete
   */
  export type DirectMessagingDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessaging
     */
    select?: DirectMessagingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMessagingInclude<ExtArgs> | null
    /**
     * Filter which DirectMessaging to delete.
     */
    where: DirectMessagingWhereUniqueInput
  }


  /**
   * DirectMessaging deleteMany
   */
  export type DirectMessagingDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which DirectMessagings to delete
     */
    where?: DirectMessagingWhereInput
  }


  /**
   * DirectMessaging.messages
   */
  export type DirectMessaging$messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * DirectMessaging without action
   */
  export type DirectMessagingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectMessaging
     */
    select?: DirectMessagingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMessagingInclude<ExtArgs> | null
  }



  /**
   * Model Notification
   */


  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    type: NotificationType | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    type: NotificationType | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    user_id: number
    type: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    user_id?: true
    type?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    user_id?: true
    type?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    user_id?: true
    type?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }


  export type NotificationGroupByOutputType = {
    id: string
    user_id: string
    type: NotificationType
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    type?: boolean
    createdAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    user_id?: boolean
    type?: boolean
    createdAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type NotificationGetPayload<S extends boolean | null | undefined | NotificationArgs> = $Types.GetResult<NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Types.GetResult<NotificationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Types.GetResult<NotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Types.GetResult<NotificationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Types.GetResult<NotificationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<NotificationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
    **/
    create<T extends NotificationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Types.GetResult<NotificationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Notifications.
     *     @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notification = await prisma.notification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
    **/
    delete<T extends NotificationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Types.GetResult<NotificationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Types.GetResult<NotificationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Types.GetResult<NotificationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly user_id: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }


  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }


  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification without action
   */
  export type NotificationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    firstname: 'firstname',
    lastname: 'lastname',
    email: 'email',
    avatar: 'avatar',
    background: 'background',
    firstauth: 'firstauth',
    status: 'status'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    id: 'id',
    player_1_id: 'player_1_id',
    player_2_id: 'player_2_id',
    result: 'result'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const StatsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    wins: 'wins',
    losses: 'losses',
    ladder_level: 'ladder_level'
  };

  export type StatsScalarFieldEnum = (typeof StatsScalarFieldEnum)[keyof typeof StatsScalarFieldEnum]


  export const FriendshipsScalarFieldEnum: {
    id: 'id',
    user1_id: 'user1_id',
    user2_id: 'user2_id',
    createdAt: 'createdAt',
    relationStatus: 'relationStatus'
  };

  export type FriendshipsScalarFieldEnum = (typeof FriendshipsScalarFieldEnum)[keyof typeof FriendshipsScalarFieldEnum]


  export const ChannelMembershipScalarFieldEnum: {
    id: 'id',
    channel_id: 'channel_id',
    user_id: 'user_id',
    role: 'role',
    joined_at: 'joined_at',
    is_banned: 'is_banned',
    banned_at: 'banned_at'
  };

  export type ChannelMembershipScalarFieldEnum = (typeof ChannelMembershipScalarFieldEnum)[keyof typeof ChannelMembershipScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    channel_id: 'channel_id',
    dm_id: 'dm_id',
    content: 'content',
    createdAt: 'createdAt',
    is_read: 'is_read'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const ChannelScalarFieldEnum: {
    id: 'id',
    type: 'type',
    name: 'name',
    image: 'image',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChannelScalarFieldEnum = (typeof ChannelScalarFieldEnum)[keyof typeof ChannelScalarFieldEnum]


  export const DirectMessagingScalarFieldEnum: {
    id: 'id',
    user1_id: 'user1_id',
    user2_id: 'user2_id',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DirectMessagingScalarFieldEnum = (typeof DirectMessagingScalarFieldEnum)[keyof typeof DirectMessagingScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    type: 'type',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'RelationStatus'
   */
  export type EnumRelationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RelationStatus'>
    


  /**
   * Reference to a field of type 'RelationStatus[]'
   */
  export type ListEnumRelationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RelationStatus[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Channel_type'
   */
  export type EnumChannel_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Channel_type'>
    


  /**
   * Reference to a field of type 'Channel_type[]'
   */
  export type ListEnumChannel_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Channel_type[]'>
    


  /**
   * Reference to a field of type 'DmStatus'
   */
  export type EnumDmStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DmStatus'>
    


  /**
   * Reference to a field of type 'DmStatus[]'
   */
  export type ListEnumDmStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DmStatus[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    firstname?: StringFilter<"User"> | string
    lastname?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    avatar?: StringFilter<"User"> | string
    background?: StringFilter<"User"> | string
    firstauth?: BoolFilter<"User"> | boolean
    status?: EnumStatusFilter<"User"> | Status
    match_host?: MatchListRelationFilter
    match_guest?: MatchListRelationFilter
    stats?: XOR<StatsNullableRelationFilter, StatsWhereInput> | null
    invited?: FriendshipsListRelationFilter
    invitor?: FriendshipsListRelationFilter
    initiator?: DirectMessagingListRelationFilter
    receiver?: DirectMessagingListRelationFilter
    channels?: ChannelMembershipListRelationFilter
    messages?: MessageListRelationFilter
    notifications?: NotificationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
    background?: SortOrder
    firstauth?: SortOrder
    status?: SortOrder
    match_host?: matchOrderByRelationAggregateInput
    match_guest?: matchOrderByRelationAggregateInput
    stats?: StatsOrderByWithRelationInput
    invited?: FriendshipsOrderByRelationAggregateInput
    invitor?: FriendshipsOrderByRelationAggregateInput
    initiator?: DirectMessagingOrderByRelationAggregateInput
    receiver?: DirectMessagingOrderByRelationAggregateInput
    channels?: ChannelMembershipOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstname?: StringFilter<"User"> | string
    lastname?: StringFilter<"User"> | string
    avatar?: StringFilter<"User"> | string
    background?: StringFilter<"User"> | string
    firstauth?: BoolFilter<"User"> | boolean
    status?: EnumStatusFilter<"User"> | Status
    match_host?: MatchListRelationFilter
    match_guest?: MatchListRelationFilter
    stats?: XOR<StatsNullableRelationFilter, StatsWhereInput> | null
    invited?: FriendshipsListRelationFilter
    invitor?: FriendshipsListRelationFilter
    initiator?: DirectMessagingListRelationFilter
    receiver?: DirectMessagingListRelationFilter
    channels?: ChannelMembershipListRelationFilter
    messages?: MessageListRelationFilter
    notifications?: NotificationListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
    background?: SortOrder
    firstauth?: SortOrder
    status?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    firstname?: StringWithAggregatesFilter<"User"> | string
    lastname?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringWithAggregatesFilter<"User"> | string
    background?: StringWithAggregatesFilter<"User"> | string
    firstauth?: BoolWithAggregatesFilter<"User"> | boolean
    status?: EnumStatusWithAggregatesFilter<"User"> | Status
  }

  export type matchWhereInput = {
    AND?: matchWhereInput | matchWhereInput[]
    OR?: matchWhereInput[]
    NOT?: matchWhereInput | matchWhereInput[]
    id?: StringFilter<"match"> | string
    player_1_id?: StringFilter<"match"> | string
    player_2_id?: StringFilter<"match"> | string
    result?: StringFilter<"match"> | string
    player_1?: XOR<UserRelationFilter, UserWhereInput>
    player_2?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type matchOrderByWithRelationInput = {
    id?: SortOrder
    player_1_id?: SortOrder
    player_2_id?: SortOrder
    result?: SortOrder
    player_1?: UserOrderByWithRelationInput
    player_2?: UserOrderByWithRelationInput
  }

  export type matchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: matchWhereInput | matchWhereInput[]
    OR?: matchWhereInput[]
    NOT?: matchWhereInput | matchWhereInput[]
    player_1_id?: StringFilter<"match"> | string
    player_2_id?: StringFilter<"match"> | string
    result?: StringFilter<"match"> | string
    player_1?: XOR<UserRelationFilter, UserWhereInput>
    player_2?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type matchOrderByWithAggregationInput = {
    id?: SortOrder
    player_1_id?: SortOrder
    player_2_id?: SortOrder
    result?: SortOrder
    _count?: matchCountOrderByAggregateInput
    _max?: matchMaxOrderByAggregateInput
    _min?: matchMinOrderByAggregateInput
  }

  export type matchScalarWhereWithAggregatesInput = {
    AND?: matchScalarWhereWithAggregatesInput | matchScalarWhereWithAggregatesInput[]
    OR?: matchScalarWhereWithAggregatesInput[]
    NOT?: matchScalarWhereWithAggregatesInput | matchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"match"> | string
    player_1_id?: StringWithAggregatesFilter<"match"> | string
    player_2_id?: StringWithAggregatesFilter<"match"> | string
    result?: StringWithAggregatesFilter<"match"> | string
  }

  export type StatsWhereInput = {
    AND?: StatsWhereInput | StatsWhereInput[]
    OR?: StatsWhereInput[]
    NOT?: StatsWhereInput | StatsWhereInput[]
    id?: StringFilter<"Stats"> | string
    user_id?: StringFilter<"Stats"> | string
    wins?: IntFilter<"Stats"> | number
    losses?: IntFilter<"Stats"> | number
    ladder_level?: IntFilter<"Stats"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type StatsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladder_level?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type StatsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    user_id?: string
    AND?: StatsWhereInput | StatsWhereInput[]
    OR?: StatsWhereInput[]
    NOT?: StatsWhereInput | StatsWhereInput[]
    wins?: IntFilter<"Stats"> | number
    losses?: IntFilter<"Stats"> | number
    ladder_level?: IntFilter<"Stats"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "user_id">

  export type StatsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladder_level?: SortOrder
    _count?: StatsCountOrderByAggregateInput
    _avg?: StatsAvgOrderByAggregateInput
    _max?: StatsMaxOrderByAggregateInput
    _min?: StatsMinOrderByAggregateInput
    _sum?: StatsSumOrderByAggregateInput
  }

  export type StatsScalarWhereWithAggregatesInput = {
    AND?: StatsScalarWhereWithAggregatesInput | StatsScalarWhereWithAggregatesInput[]
    OR?: StatsScalarWhereWithAggregatesInput[]
    NOT?: StatsScalarWhereWithAggregatesInput | StatsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Stats"> | string
    user_id?: StringWithAggregatesFilter<"Stats"> | string
    wins?: IntWithAggregatesFilter<"Stats"> | number
    losses?: IntWithAggregatesFilter<"Stats"> | number
    ladder_level?: IntWithAggregatesFilter<"Stats"> | number
  }

  export type FriendshipsWhereInput = {
    AND?: FriendshipsWhereInput | FriendshipsWhereInput[]
    OR?: FriendshipsWhereInput[]
    NOT?: FriendshipsWhereInput | FriendshipsWhereInput[]
    id?: StringFilter<"Friendships"> | string
    user1_id?: StringFilter<"Friendships"> | string
    user2_id?: StringFilter<"Friendships"> | string
    createdAt?: DateTimeFilter<"Friendships"> | Date | string
    relationStatus?: EnumRelationStatusFilter<"Friendships"> | RelationStatus
    user1?: XOR<UserRelationFilter, UserWhereInput>
    user2?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FriendshipsOrderByWithRelationInput = {
    id?: SortOrder
    user1_id?: SortOrder
    user2_id?: SortOrder
    createdAt?: SortOrder
    relationStatus?: SortOrder
    user1?: UserOrderByWithRelationInput
    user2?: UserOrderByWithRelationInput
  }

  export type FriendshipsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    user1_id?: string
    user2_id?: string
    AND?: FriendshipsWhereInput | FriendshipsWhereInput[]
    OR?: FriendshipsWhereInput[]
    NOT?: FriendshipsWhereInput | FriendshipsWhereInput[]
    createdAt?: DateTimeFilter<"Friendships"> | Date | string
    relationStatus?: EnumRelationStatusFilter<"Friendships"> | RelationStatus
    user1?: XOR<UserRelationFilter, UserWhereInput>
    user2?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "user1_id" | "user2_id">

  export type FriendshipsOrderByWithAggregationInput = {
    id?: SortOrder
    user1_id?: SortOrder
    user2_id?: SortOrder
    createdAt?: SortOrder
    relationStatus?: SortOrder
    _count?: FriendshipsCountOrderByAggregateInput
    _max?: FriendshipsMaxOrderByAggregateInput
    _min?: FriendshipsMinOrderByAggregateInput
  }

  export type FriendshipsScalarWhereWithAggregatesInput = {
    AND?: FriendshipsScalarWhereWithAggregatesInput | FriendshipsScalarWhereWithAggregatesInput[]
    OR?: FriendshipsScalarWhereWithAggregatesInput[]
    NOT?: FriendshipsScalarWhereWithAggregatesInput | FriendshipsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Friendships"> | string
    user1_id?: StringWithAggregatesFilter<"Friendships"> | string
    user2_id?: StringWithAggregatesFilter<"Friendships"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Friendships"> | Date | string
    relationStatus?: EnumRelationStatusWithAggregatesFilter<"Friendships"> | RelationStatus
  }

  export type ChannelMembershipWhereInput = {
    AND?: ChannelMembershipWhereInput | ChannelMembershipWhereInput[]
    OR?: ChannelMembershipWhereInput[]
    NOT?: ChannelMembershipWhereInput | ChannelMembershipWhereInput[]
    id?: StringFilter<"ChannelMembership"> | string
    channel_id?: StringFilter<"ChannelMembership"> | string
    user_id?: StringFilter<"ChannelMembership"> | string
    role?: EnumRoleFilter<"ChannelMembership"> | Role
    joined_at?: DateTimeFilter<"ChannelMembership"> | Date | string
    is_banned?: BoolFilter<"ChannelMembership"> | boolean
    banned_at?: DateTimeNullableFilter<"ChannelMembership"> | Date | string | null
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ChannelMembershipOrderByWithRelationInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
    role?: SortOrder
    joined_at?: SortOrder
    is_banned?: SortOrder
    banned_at?: SortOrderInput | SortOrder
    channel?: ChannelOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ChannelMembershipWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    channel_id_user_id?: ChannelMembershipChannel_idUser_idCompoundUniqueInput
    AND?: ChannelMembershipWhereInput | ChannelMembershipWhereInput[]
    OR?: ChannelMembershipWhereInput[]
    NOT?: ChannelMembershipWhereInput | ChannelMembershipWhereInput[]
    channel_id?: StringFilter<"ChannelMembership"> | string
    user_id?: StringFilter<"ChannelMembership"> | string
    role?: EnumRoleFilter<"ChannelMembership"> | Role
    joined_at?: DateTimeFilter<"ChannelMembership"> | Date | string
    is_banned?: BoolFilter<"ChannelMembership"> | boolean
    banned_at?: DateTimeNullableFilter<"ChannelMembership"> | Date | string | null
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "channel_id_user_id">

  export type ChannelMembershipOrderByWithAggregationInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
    role?: SortOrder
    joined_at?: SortOrder
    is_banned?: SortOrder
    banned_at?: SortOrderInput | SortOrder
    _count?: ChannelMembershipCountOrderByAggregateInput
    _max?: ChannelMembershipMaxOrderByAggregateInput
    _min?: ChannelMembershipMinOrderByAggregateInput
  }

  export type ChannelMembershipScalarWhereWithAggregatesInput = {
    AND?: ChannelMembershipScalarWhereWithAggregatesInput | ChannelMembershipScalarWhereWithAggregatesInput[]
    OR?: ChannelMembershipScalarWhereWithAggregatesInput[]
    NOT?: ChannelMembershipScalarWhereWithAggregatesInput | ChannelMembershipScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChannelMembership"> | string
    channel_id?: StringWithAggregatesFilter<"ChannelMembership"> | string
    user_id?: StringWithAggregatesFilter<"ChannelMembership"> | string
    role?: EnumRoleWithAggregatesFilter<"ChannelMembership"> | Role
    joined_at?: DateTimeWithAggregatesFilter<"ChannelMembership"> | Date | string
    is_banned?: BoolWithAggregatesFilter<"ChannelMembership"> | boolean
    banned_at?: DateTimeNullableWithAggregatesFilter<"ChannelMembership"> | Date | string | null
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    user_id?: StringFilter<"Message"> | string
    channel_id?: StringNullableFilter<"Message"> | string | null
    dm_id?: StringNullableFilter<"Message"> | string | null
    content?: StringFilter<"Message"> | string
    createdAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    is_read?: BoolNullableFilter<"Message"> | boolean | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    channel?: XOR<ChannelNullableRelationFilter, ChannelWhereInput> | null
    dm?: XOR<DirectMessagingNullableRelationFilter, DirectMessagingWhereInput> | null
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    channel_id?: SortOrderInput | SortOrder
    dm_id?: SortOrderInput | SortOrder
    content?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    is_read?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    channel?: ChannelOrderByWithRelationInput
    dm?: DirectMessagingOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    user_id?: StringFilter<"Message"> | string
    channel_id?: StringNullableFilter<"Message"> | string | null
    dm_id?: StringNullableFilter<"Message"> | string | null
    content?: StringFilter<"Message"> | string
    createdAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    is_read?: BoolNullableFilter<"Message"> | boolean | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    channel?: XOR<ChannelNullableRelationFilter, ChannelWhereInput> | null
    dm?: XOR<DirectMessagingNullableRelationFilter, DirectMessagingWhereInput> | null
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    channel_id?: SortOrderInput | SortOrder
    dm_id?: SortOrderInput | SortOrder
    content?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    is_read?: SortOrderInput | SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    user_id?: StringWithAggregatesFilter<"Message"> | string
    channel_id?: StringNullableWithAggregatesFilter<"Message"> | string | null
    dm_id?: StringNullableWithAggregatesFilter<"Message"> | string | null
    content?: StringWithAggregatesFilter<"Message"> | string
    createdAt?: DateTimeNullableWithAggregatesFilter<"Message"> | Date | string | null
    is_read?: BoolNullableWithAggregatesFilter<"Message"> | boolean | null
  }

  export type ChannelWhereInput = {
    AND?: ChannelWhereInput | ChannelWhereInput[]
    OR?: ChannelWhereInput[]
    NOT?: ChannelWhereInput | ChannelWhereInput[]
    id?: StringFilter<"Channel"> | string
    type?: EnumChannel_typeFilter<"Channel"> | Channel_type
    name?: StringFilter<"Channel"> | string
    image?: StringFilter<"Channel"> | string
    password?: StringNullableFilter<"Channel"> | string | null
    createdAt?: DateTimeFilter<"Channel"> | Date | string
    updatedAt?: DateTimeFilter<"Channel"> | Date | string
    memeberShips?: ChannelMembershipListRelationFilter
    messages?: MessageListRelationFilter
  }

  export type ChannelOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    image?: SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    memeberShips?: ChannelMembershipOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type ChannelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChannelWhereInput | ChannelWhereInput[]
    OR?: ChannelWhereInput[]
    NOT?: ChannelWhereInput | ChannelWhereInput[]
    type?: EnumChannel_typeFilter<"Channel"> | Channel_type
    name?: StringFilter<"Channel"> | string
    image?: StringFilter<"Channel"> | string
    password?: StringNullableFilter<"Channel"> | string | null
    createdAt?: DateTimeFilter<"Channel"> | Date | string
    updatedAt?: DateTimeFilter<"Channel"> | Date | string
    memeberShips?: ChannelMembershipListRelationFilter
    messages?: MessageListRelationFilter
  }, "id">

  export type ChannelOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    image?: SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChannelCountOrderByAggregateInput
    _max?: ChannelMaxOrderByAggregateInput
    _min?: ChannelMinOrderByAggregateInput
  }

  export type ChannelScalarWhereWithAggregatesInput = {
    AND?: ChannelScalarWhereWithAggregatesInput | ChannelScalarWhereWithAggregatesInput[]
    OR?: ChannelScalarWhereWithAggregatesInput[]
    NOT?: ChannelScalarWhereWithAggregatesInput | ChannelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Channel"> | string
    type?: EnumChannel_typeWithAggregatesFilter<"Channel"> | Channel_type
    name?: StringWithAggregatesFilter<"Channel"> | string
    image?: StringWithAggregatesFilter<"Channel"> | string
    password?: StringNullableWithAggregatesFilter<"Channel"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Channel"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Channel"> | Date | string
  }

  export type DirectMessagingWhereInput = {
    AND?: DirectMessagingWhereInput | DirectMessagingWhereInput[]
    OR?: DirectMessagingWhereInput[]
    NOT?: DirectMessagingWhereInput | DirectMessagingWhereInput[]
    id?: StringFilter<"DirectMessaging"> | string
    user1_id?: StringFilter<"DirectMessaging"> | string
    user2_id?: StringFilter<"DirectMessaging"> | string
    status?: EnumDmStatusFilter<"DirectMessaging"> | DmStatus
    createdAt?: DateTimeFilter<"DirectMessaging"> | Date | string
    updatedAt?: DateTimeFilter<"DirectMessaging"> | Date | string
    user1?: XOR<UserRelationFilter, UserWhereInput>
    user2?: XOR<UserRelationFilter, UserWhereInput>
    messages?: MessageListRelationFilter
  }

  export type DirectMessagingOrderByWithRelationInput = {
    id?: SortOrder
    user1_id?: SortOrder
    user2_id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user1?: UserOrderByWithRelationInput
    user2?: UserOrderByWithRelationInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type DirectMessagingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    user1_id?: string
    user2_id?: string
    AND?: DirectMessagingWhereInput | DirectMessagingWhereInput[]
    OR?: DirectMessagingWhereInput[]
    NOT?: DirectMessagingWhereInput | DirectMessagingWhereInput[]
    status?: EnumDmStatusFilter<"DirectMessaging"> | DmStatus
    createdAt?: DateTimeFilter<"DirectMessaging"> | Date | string
    updatedAt?: DateTimeFilter<"DirectMessaging"> | Date | string
    user1?: XOR<UserRelationFilter, UserWhereInput>
    user2?: XOR<UserRelationFilter, UserWhereInput>
    messages?: MessageListRelationFilter
  }, "id" | "user1_id" | "user2_id">

  export type DirectMessagingOrderByWithAggregationInput = {
    id?: SortOrder
    user1_id?: SortOrder
    user2_id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DirectMessagingCountOrderByAggregateInput
    _max?: DirectMessagingMaxOrderByAggregateInput
    _min?: DirectMessagingMinOrderByAggregateInput
  }

  export type DirectMessagingScalarWhereWithAggregatesInput = {
    AND?: DirectMessagingScalarWhereWithAggregatesInput | DirectMessagingScalarWhereWithAggregatesInput[]
    OR?: DirectMessagingScalarWhereWithAggregatesInput[]
    NOT?: DirectMessagingScalarWhereWithAggregatesInput | DirectMessagingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DirectMessaging"> | string
    user1_id?: StringWithAggregatesFilter<"DirectMessaging"> | string
    user2_id?: StringWithAggregatesFilter<"DirectMessaging"> | string
    status?: EnumDmStatusWithAggregatesFilter<"DirectMessaging"> | DmStatus
    createdAt?: DateTimeWithAggregatesFilter<"DirectMessaging"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DirectMessaging"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    user_id?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | NotificationType
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    user_id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    type?: EnumNotificationTypeFilter<"Notification"> | NotificationType
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "user_id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    user_id?: StringWithAggregatesFilter<"Notification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | NotificationType
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchCreateNestedManyWithoutPlayer_1Input
    match_guest?: matchCreateNestedManyWithoutPlayer_2Input
    stats?: StatsCreateNestedOneWithoutUserInput
    invited?: FriendshipsCreateNestedManyWithoutUser1Input
    invitor?: FriendshipsCreateNestedManyWithoutUser2Input
    initiator?: DirectMessagingCreateNestedManyWithoutUser1Input
    receiver?: DirectMessagingCreateNestedManyWithoutUser2Input
    channels?: ChannelMembershipCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchUncheckedCreateNestedManyWithoutPlayer_1Input
    match_guest?: matchUncheckedCreateNestedManyWithoutPlayer_2Input
    stats?: StatsUncheckedCreateNestedOneWithoutUserInput
    invited?: FriendshipsUncheckedCreateNestedManyWithoutUser1Input
    invitor?: FriendshipsUncheckedCreateNestedManyWithoutUser2Input
    initiator?: DirectMessagingUncheckedCreateNestedManyWithoutUser1Input
    receiver?: DirectMessagingUncheckedCreateNestedManyWithoutUser2Input
    channels?: ChannelMembershipUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUpdateManyWithoutPlayer_1NestedInput
    match_guest?: matchUpdateManyWithoutPlayer_2NestedInput
    stats?: StatsUpdateOneWithoutUserNestedInput
    invited?: FriendshipsUpdateManyWithoutUser1NestedInput
    invitor?: FriendshipsUpdateManyWithoutUser2NestedInput
    initiator?: DirectMessagingUpdateManyWithoutUser1NestedInput
    receiver?: DirectMessagingUpdateManyWithoutUser2NestedInput
    channels?: ChannelMembershipUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUncheckedUpdateManyWithoutPlayer_1NestedInput
    match_guest?: matchUncheckedUpdateManyWithoutPlayer_2NestedInput
    stats?: StatsUncheckedUpdateOneWithoutUserNestedInput
    invited?: FriendshipsUncheckedUpdateManyWithoutUser1NestedInput
    invitor?: FriendshipsUncheckedUpdateManyWithoutUser2NestedInput
    initiator?: DirectMessagingUncheckedUpdateManyWithoutUser1NestedInput
    receiver?: DirectMessagingUncheckedUpdateManyWithoutUser2NestedInput
    channels?: ChannelMembershipUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
  }

  export type matchCreateInput = {
    id?: string
    result: string
    player_1: UserCreateNestedOneWithoutMatch_hostInput
    player_2: UserCreateNestedOneWithoutMatch_guestInput
  }

  export type matchUncheckedCreateInput = {
    id?: string
    player_1_id: string
    player_2_id: string
    result: string
  }

  export type matchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    result?: StringFieldUpdateOperationsInput | string
    player_1?: UserUpdateOneRequiredWithoutMatch_hostNestedInput
    player_2?: UserUpdateOneRequiredWithoutMatch_guestNestedInput
  }

  export type matchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    player_1_id?: StringFieldUpdateOperationsInput | string
    player_2_id?: StringFieldUpdateOperationsInput | string
    result?: StringFieldUpdateOperationsInput | string
  }

  export type matchCreateManyInput = {
    id?: string
    player_1_id: string
    player_2_id: string
    result: string
  }

  export type matchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    result?: StringFieldUpdateOperationsInput | string
  }

  export type matchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    player_1_id?: StringFieldUpdateOperationsInput | string
    player_2_id?: StringFieldUpdateOperationsInput | string
    result?: StringFieldUpdateOperationsInput | string
  }

  export type StatsCreateInput = {
    id?: string
    wins?: number
    losses?: number
    ladder_level?: number
    user: UserCreateNestedOneWithoutStatsInput
  }

  export type StatsUncheckedCreateInput = {
    id?: string
    user_id: string
    wins?: number
    losses?: number
    ladder_level?: number
  }

  export type StatsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutStatsNestedInput
  }

  export type StatsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
  }

  export type StatsCreateManyInput = {
    id?: string
    user_id: string
    wins?: number
    losses?: number
    ladder_level?: number
  }

  export type StatsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
  }

  export type StatsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
  }

  export type FriendshipsCreateInput = {
    id?: string
    createdAt?: Date | string
    relationStatus?: RelationStatus
    user1: UserCreateNestedOneWithoutInvitedInput
    user2: UserCreateNestedOneWithoutInvitorInput
  }

  export type FriendshipsUncheckedCreateInput = {
    id?: string
    user1_id: string
    user2_id: string
    createdAt?: Date | string
    relationStatus?: RelationStatus
  }

  export type FriendshipsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationStatus?: EnumRelationStatusFieldUpdateOperationsInput | RelationStatus
    user1?: UserUpdateOneRequiredWithoutInvitedNestedInput
    user2?: UserUpdateOneRequiredWithoutInvitorNestedInput
  }

  export type FriendshipsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user1_id?: StringFieldUpdateOperationsInput | string
    user2_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationStatus?: EnumRelationStatusFieldUpdateOperationsInput | RelationStatus
  }

  export type FriendshipsCreateManyInput = {
    id?: string
    user1_id: string
    user2_id: string
    createdAt?: Date | string
    relationStatus?: RelationStatus
  }

  export type FriendshipsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationStatus?: EnumRelationStatusFieldUpdateOperationsInput | RelationStatus
  }

  export type FriendshipsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user1_id?: StringFieldUpdateOperationsInput | string
    user2_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationStatus?: EnumRelationStatusFieldUpdateOperationsInput | RelationStatus
  }

  export type ChannelMembershipCreateInput = {
    id?: string
    role: Role
    joined_at?: Date | string
    is_banned?: boolean
    banned_at?: Date | string | null
    channel: ChannelCreateNestedOneWithoutMemeberShipsInput
    user: UserCreateNestedOneWithoutChannelsInput
  }

  export type ChannelMembershipUncheckedCreateInput = {
    id?: string
    channel_id: string
    user_id: string
    role: Role
    joined_at?: Date | string
    is_banned?: boolean
    banned_at?: Date | string | null
  }

  export type ChannelMembershipUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    banned_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    channel?: ChannelUpdateOneRequiredWithoutMemeberShipsNestedInput
    user?: UserUpdateOneRequiredWithoutChannelsNestedInput
  }

  export type ChannelMembershipUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    channel_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    banned_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ChannelMembershipCreateManyInput = {
    id?: string
    channel_id: string
    user_id: string
    role: Role
    joined_at?: Date | string
    is_banned?: boolean
    banned_at?: Date | string | null
  }

  export type ChannelMembershipUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    banned_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ChannelMembershipUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    channel_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    banned_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string | null
    is_read?: boolean | null
    user: UserCreateNestedOneWithoutMessagesInput
    channel?: ChannelCreateNestedOneWithoutMessagesInput
    dm?: DirectMessagingCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    user_id: string
    channel_id?: string | null
    dm_id?: string | null
    content: string
    createdAt?: Date | string | null
    is_read?: boolean | null
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_read?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
    channel?: ChannelUpdateOneWithoutMessagesNestedInput
    dm?: DirectMessagingUpdateOneWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    channel_id?: NullableStringFieldUpdateOperationsInput | string | null
    dm_id?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_read?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type MessageCreateManyInput = {
    id?: string
    user_id: string
    channel_id?: string | null
    dm_id?: string | null
    content: string
    createdAt?: Date | string | null
    is_read?: boolean | null
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_read?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    channel_id?: NullableStringFieldUpdateOperationsInput | string | null
    dm_id?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_read?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ChannelCreateInput = {
    id?: string
    type: Channel_type
    name: string
    image: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memeberShips?: ChannelMembershipCreateNestedManyWithoutChannelInput
    messages?: MessageCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateInput = {
    id?: string
    type: Channel_type
    name: string
    image: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memeberShips?: ChannelMembershipUncheckedCreateNestedManyWithoutChannelInput
    messages?: MessageUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumChannel_typeFieldUpdateOperationsInput | Channel_type
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memeberShips?: ChannelMembershipUpdateManyWithoutChannelNestedInput
    messages?: MessageUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumChannel_typeFieldUpdateOperationsInput | Channel_type
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memeberShips?: ChannelMembershipUncheckedUpdateManyWithoutChannelNestedInput
    messages?: MessageUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type ChannelCreateManyInput = {
    id?: string
    type: Channel_type
    name: string
    image: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChannelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumChannel_typeFieldUpdateOperationsInput | Channel_type
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChannelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumChannel_typeFieldUpdateOperationsInput | Channel_type
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMessagingCreateInput = {
    id?: string
    status?: DmStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user1: UserCreateNestedOneWithoutInitiatorInput
    user2: UserCreateNestedOneWithoutReceiverInput
    messages?: MessageCreateNestedManyWithoutDmInput
  }

  export type DirectMessagingUncheckedCreateInput = {
    id?: string
    user1_id: string
    user2_id: string
    status?: DmStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutDmInput
  }

  export type DirectMessagingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumDmStatusFieldUpdateOperationsInput | DmStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user1?: UserUpdateOneRequiredWithoutInitiatorNestedInput
    user2?: UserUpdateOneRequiredWithoutReceiverNestedInput
    messages?: MessageUpdateManyWithoutDmNestedInput
  }

  export type DirectMessagingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user1_id?: StringFieldUpdateOperationsInput | string
    user2_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDmStatusFieldUpdateOperationsInput | DmStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutDmNestedInput
  }

  export type DirectMessagingCreateManyInput = {
    id?: string
    user1_id: string
    user2_id: string
    status?: DmStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DirectMessagingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumDmStatusFieldUpdateOperationsInput | DmStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMessagingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user1_id?: StringFieldUpdateOperationsInput | string
    user2_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDmStatusFieldUpdateOperationsInput | DmStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    type: NotificationType
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    user_id: string
    type: NotificationType
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | NotificationType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | NotificationType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    user_id: string
    type: NotificationType
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | NotificationType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | NotificationType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | Status
  }

  export type MatchListRelationFilter = {
    every?: matchWhereInput
    some?: matchWhereInput
    none?: matchWhereInput
  }

  export type StatsNullableRelationFilter = {
    is?: StatsWhereInput | null
    isNot?: StatsWhereInput | null
  }

  export type FriendshipsListRelationFilter = {
    every?: FriendshipsWhereInput
    some?: FriendshipsWhereInput
    none?: FriendshipsWhereInput
  }

  export type DirectMessagingListRelationFilter = {
    every?: DirectMessagingWhereInput
    some?: DirectMessagingWhereInput
    none?: DirectMessagingWhereInput
  }

  export type ChannelMembershipListRelationFilter = {
    every?: ChannelMembershipWhereInput
    some?: ChannelMembershipWhereInput
    none?: ChannelMembershipWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type matchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FriendshipsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DirectMessagingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChannelMembershipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
    background?: SortOrder
    firstauth?: SortOrder
    status?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
    background?: SortOrder
    firstauth?: SortOrder
    status?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
    background?: SortOrder
    firstauth?: SortOrder
    status?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type matchCountOrderByAggregateInput = {
    id?: SortOrder
    player_1_id?: SortOrder
    player_2_id?: SortOrder
    result?: SortOrder
  }

  export type matchMaxOrderByAggregateInput = {
    id?: SortOrder
    player_1_id?: SortOrder
    player_2_id?: SortOrder
    result?: SortOrder
  }

  export type matchMinOrderByAggregateInput = {
    id?: SortOrder
    player_1_id?: SortOrder
    player_2_id?: SortOrder
    result?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StatsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladder_level?: SortOrder
  }

  export type StatsAvgOrderByAggregateInput = {
    wins?: SortOrder
    losses?: SortOrder
    ladder_level?: SortOrder
  }

  export type StatsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladder_level?: SortOrder
  }

  export type StatsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladder_level?: SortOrder
  }

  export type StatsSumOrderByAggregateInput = {
    wins?: SortOrder
    losses?: SortOrder
    ladder_level?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumRelationStatusFilter<$PrismaModel = never> = {
    equals?: RelationStatus | EnumRelationStatusFieldRefInput<$PrismaModel>
    in?: RelationStatus[] | ListEnumRelationStatusFieldRefInput<$PrismaModel>
    notIn?: RelationStatus[] | ListEnumRelationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRelationStatusFilter<$PrismaModel> | RelationStatus
  }

  export type FriendshipsCountOrderByAggregateInput = {
    id?: SortOrder
    user1_id?: SortOrder
    user2_id?: SortOrder
    createdAt?: SortOrder
    relationStatus?: SortOrder
  }

  export type FriendshipsMaxOrderByAggregateInput = {
    id?: SortOrder
    user1_id?: SortOrder
    user2_id?: SortOrder
    createdAt?: SortOrder
    relationStatus?: SortOrder
  }

  export type FriendshipsMinOrderByAggregateInput = {
    id?: SortOrder
    user1_id?: SortOrder
    user2_id?: SortOrder
    createdAt?: SortOrder
    relationStatus?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumRelationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: RelationStatus | EnumRelationStatusFieldRefInput<$PrismaModel>
    in?: RelationStatus[] | ListEnumRelationStatusFieldRefInput<$PrismaModel>
    notIn?: RelationStatus[] | ListEnumRelationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRelationStatusWithAggregatesFilter<$PrismaModel> | RelationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRelationStatusFilter<$PrismaModel>
    _max?: NestedEnumRelationStatusFilter<$PrismaModel>
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | Role
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ChannelRelationFilter = {
    is?: ChannelWhereInput
    isNot?: ChannelWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ChannelMembershipChannel_idUser_idCompoundUniqueInput = {
    channel_id: string
    user_id: string
  }

  export type ChannelMembershipCountOrderByAggregateInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
    role?: SortOrder
    joined_at?: SortOrder
    is_banned?: SortOrder
    banned_at?: SortOrder
  }

  export type ChannelMembershipMaxOrderByAggregateInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
    role?: SortOrder
    joined_at?: SortOrder
    is_banned?: SortOrder
    banned_at?: SortOrder
  }

  export type ChannelMembershipMinOrderByAggregateInput = {
    id?: SortOrder
    channel_id?: SortOrder
    user_id?: SortOrder
    role?: SortOrder
    joined_at?: SortOrder
    is_banned?: SortOrder
    banned_at?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type ChannelNullableRelationFilter = {
    is?: ChannelWhereInput | null
    isNot?: ChannelWhereInput | null
  }

  export type DirectMessagingNullableRelationFilter = {
    is?: DirectMessagingWhereInput | null
    isNot?: DirectMessagingWhereInput | null
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    channel_id?: SortOrder
    dm_id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    is_read?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    channel_id?: SortOrder
    dm_id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    is_read?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    channel_id?: SortOrder
    dm_id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    is_read?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type EnumChannel_typeFilter<$PrismaModel = never> = {
    equals?: Channel_type | EnumChannel_typeFieldRefInput<$PrismaModel>
    in?: Channel_type[] | ListEnumChannel_typeFieldRefInput<$PrismaModel>
    notIn?: Channel_type[] | ListEnumChannel_typeFieldRefInput<$PrismaModel>
    not?: NestedEnumChannel_typeFilter<$PrismaModel> | Channel_type
  }

  export type ChannelCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    image?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChannelMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    image?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChannelMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    image?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumChannel_typeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Channel_type | EnumChannel_typeFieldRefInput<$PrismaModel>
    in?: Channel_type[] | ListEnumChannel_typeFieldRefInput<$PrismaModel>
    notIn?: Channel_type[] | ListEnumChannel_typeFieldRefInput<$PrismaModel>
    not?: NestedEnumChannel_typeWithAggregatesFilter<$PrismaModel> | Channel_type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChannel_typeFilter<$PrismaModel>
    _max?: NestedEnumChannel_typeFilter<$PrismaModel>
  }

  export type EnumDmStatusFilter<$PrismaModel = never> = {
    equals?: DmStatus | EnumDmStatusFieldRefInput<$PrismaModel>
    in?: DmStatus[] | ListEnumDmStatusFieldRefInput<$PrismaModel>
    notIn?: DmStatus[] | ListEnumDmStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDmStatusFilter<$PrismaModel> | DmStatus
  }

  export type DirectMessagingCountOrderByAggregateInput = {
    id?: SortOrder
    user1_id?: SortOrder
    user2_id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DirectMessagingMaxOrderByAggregateInput = {
    id?: SortOrder
    user1_id?: SortOrder
    user2_id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DirectMessagingMinOrderByAggregateInput = {
    id?: SortOrder
    user1_id?: SortOrder
    user2_id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumDmStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: DmStatus | EnumDmStatusFieldRefInput<$PrismaModel>
    in?: DmStatus[] | ListEnumDmStatusFieldRefInput<$PrismaModel>
    notIn?: DmStatus[] | ListEnumDmStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDmStatusWithAggregatesFilter<$PrismaModel> | DmStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDmStatusFilter<$PrismaModel>
    _max?: NestedEnumDmStatusFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | NotificationType
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type matchCreateNestedManyWithoutPlayer_1Input = {
    create?: XOR<matchCreateWithoutPlayer_1Input, matchUncheckedCreateWithoutPlayer_1Input> | matchCreateWithoutPlayer_1Input[] | matchUncheckedCreateWithoutPlayer_1Input[]
    connectOrCreate?: matchCreateOrConnectWithoutPlayer_1Input | matchCreateOrConnectWithoutPlayer_1Input[]
    createMany?: matchCreateManyPlayer_1InputEnvelope
    connect?: matchWhereUniqueInput | matchWhereUniqueInput[]
  }

  export type matchCreateNestedManyWithoutPlayer_2Input = {
    create?: XOR<matchCreateWithoutPlayer_2Input, matchUncheckedCreateWithoutPlayer_2Input> | matchCreateWithoutPlayer_2Input[] | matchUncheckedCreateWithoutPlayer_2Input[]
    connectOrCreate?: matchCreateOrConnectWithoutPlayer_2Input | matchCreateOrConnectWithoutPlayer_2Input[]
    createMany?: matchCreateManyPlayer_2InputEnvelope
    connect?: matchWhereUniqueInput | matchWhereUniqueInput[]
  }

  export type StatsCreateNestedOneWithoutUserInput = {
    create?: XOR<StatsCreateWithoutUserInput, StatsUncheckedCreateWithoutUserInput>
    connectOrCreate?: StatsCreateOrConnectWithoutUserInput
    connect?: StatsWhereUniqueInput
  }

  export type FriendshipsCreateNestedManyWithoutUser1Input = {
    create?: XOR<FriendshipsCreateWithoutUser1Input, FriendshipsUncheckedCreateWithoutUser1Input> | FriendshipsCreateWithoutUser1Input[] | FriendshipsUncheckedCreateWithoutUser1Input[]
    connectOrCreate?: FriendshipsCreateOrConnectWithoutUser1Input | FriendshipsCreateOrConnectWithoutUser1Input[]
    createMany?: FriendshipsCreateManyUser1InputEnvelope
    connect?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
  }

  export type FriendshipsCreateNestedManyWithoutUser2Input = {
    create?: XOR<FriendshipsCreateWithoutUser2Input, FriendshipsUncheckedCreateWithoutUser2Input> | FriendshipsCreateWithoutUser2Input[] | FriendshipsUncheckedCreateWithoutUser2Input[]
    connectOrCreate?: FriendshipsCreateOrConnectWithoutUser2Input | FriendshipsCreateOrConnectWithoutUser2Input[]
    createMany?: FriendshipsCreateManyUser2InputEnvelope
    connect?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
  }

  export type DirectMessagingCreateNestedManyWithoutUser1Input = {
    create?: XOR<DirectMessagingCreateWithoutUser1Input, DirectMessagingUncheckedCreateWithoutUser1Input> | DirectMessagingCreateWithoutUser1Input[] | DirectMessagingUncheckedCreateWithoutUser1Input[]
    connectOrCreate?: DirectMessagingCreateOrConnectWithoutUser1Input | DirectMessagingCreateOrConnectWithoutUser1Input[]
    createMany?: DirectMessagingCreateManyUser1InputEnvelope
    connect?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
  }

  export type DirectMessagingCreateNestedManyWithoutUser2Input = {
    create?: XOR<DirectMessagingCreateWithoutUser2Input, DirectMessagingUncheckedCreateWithoutUser2Input> | DirectMessagingCreateWithoutUser2Input[] | DirectMessagingUncheckedCreateWithoutUser2Input[]
    connectOrCreate?: DirectMessagingCreateOrConnectWithoutUser2Input | DirectMessagingCreateOrConnectWithoutUser2Input[]
    createMany?: DirectMessagingCreateManyUser2InputEnvelope
    connect?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
  }

  export type ChannelMembershipCreateNestedManyWithoutUserInput = {
    create?: XOR<ChannelMembershipCreateWithoutUserInput, ChannelMembershipUncheckedCreateWithoutUserInput> | ChannelMembershipCreateWithoutUserInput[] | ChannelMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChannelMembershipCreateOrConnectWithoutUserInput | ChannelMembershipCreateOrConnectWithoutUserInput[]
    createMany?: ChannelMembershipCreateManyUserInputEnvelope
    connect?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutUserInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type matchUncheckedCreateNestedManyWithoutPlayer_1Input = {
    create?: XOR<matchCreateWithoutPlayer_1Input, matchUncheckedCreateWithoutPlayer_1Input> | matchCreateWithoutPlayer_1Input[] | matchUncheckedCreateWithoutPlayer_1Input[]
    connectOrCreate?: matchCreateOrConnectWithoutPlayer_1Input | matchCreateOrConnectWithoutPlayer_1Input[]
    createMany?: matchCreateManyPlayer_1InputEnvelope
    connect?: matchWhereUniqueInput | matchWhereUniqueInput[]
  }

  export type matchUncheckedCreateNestedManyWithoutPlayer_2Input = {
    create?: XOR<matchCreateWithoutPlayer_2Input, matchUncheckedCreateWithoutPlayer_2Input> | matchCreateWithoutPlayer_2Input[] | matchUncheckedCreateWithoutPlayer_2Input[]
    connectOrCreate?: matchCreateOrConnectWithoutPlayer_2Input | matchCreateOrConnectWithoutPlayer_2Input[]
    createMany?: matchCreateManyPlayer_2InputEnvelope
    connect?: matchWhereUniqueInput | matchWhereUniqueInput[]
  }

  export type StatsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StatsCreateWithoutUserInput, StatsUncheckedCreateWithoutUserInput>
    connectOrCreate?: StatsCreateOrConnectWithoutUserInput
    connect?: StatsWhereUniqueInput
  }

  export type FriendshipsUncheckedCreateNestedManyWithoutUser1Input = {
    create?: XOR<FriendshipsCreateWithoutUser1Input, FriendshipsUncheckedCreateWithoutUser1Input> | FriendshipsCreateWithoutUser1Input[] | FriendshipsUncheckedCreateWithoutUser1Input[]
    connectOrCreate?: FriendshipsCreateOrConnectWithoutUser1Input | FriendshipsCreateOrConnectWithoutUser1Input[]
    createMany?: FriendshipsCreateManyUser1InputEnvelope
    connect?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
  }

  export type FriendshipsUncheckedCreateNestedManyWithoutUser2Input = {
    create?: XOR<FriendshipsCreateWithoutUser2Input, FriendshipsUncheckedCreateWithoutUser2Input> | FriendshipsCreateWithoutUser2Input[] | FriendshipsUncheckedCreateWithoutUser2Input[]
    connectOrCreate?: FriendshipsCreateOrConnectWithoutUser2Input | FriendshipsCreateOrConnectWithoutUser2Input[]
    createMany?: FriendshipsCreateManyUser2InputEnvelope
    connect?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
  }

  export type DirectMessagingUncheckedCreateNestedManyWithoutUser1Input = {
    create?: XOR<DirectMessagingCreateWithoutUser1Input, DirectMessagingUncheckedCreateWithoutUser1Input> | DirectMessagingCreateWithoutUser1Input[] | DirectMessagingUncheckedCreateWithoutUser1Input[]
    connectOrCreate?: DirectMessagingCreateOrConnectWithoutUser1Input | DirectMessagingCreateOrConnectWithoutUser1Input[]
    createMany?: DirectMessagingCreateManyUser1InputEnvelope
    connect?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
  }

  export type DirectMessagingUncheckedCreateNestedManyWithoutUser2Input = {
    create?: XOR<DirectMessagingCreateWithoutUser2Input, DirectMessagingUncheckedCreateWithoutUser2Input> | DirectMessagingCreateWithoutUser2Input[] | DirectMessagingUncheckedCreateWithoutUser2Input[]
    connectOrCreate?: DirectMessagingCreateOrConnectWithoutUser2Input | DirectMessagingCreateOrConnectWithoutUser2Input[]
    createMany?: DirectMessagingCreateManyUser2InputEnvelope
    connect?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
  }

  export type ChannelMembershipUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChannelMembershipCreateWithoutUserInput, ChannelMembershipUncheckedCreateWithoutUserInput> | ChannelMembershipCreateWithoutUserInput[] | ChannelMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChannelMembershipCreateOrConnectWithoutUserInput | ChannelMembershipCreateOrConnectWithoutUserInput[]
    createMany?: ChannelMembershipCreateManyUserInputEnvelope
    connect?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: Status
  }

  export type matchUpdateManyWithoutPlayer_1NestedInput = {
    create?: XOR<matchCreateWithoutPlayer_1Input, matchUncheckedCreateWithoutPlayer_1Input> | matchCreateWithoutPlayer_1Input[] | matchUncheckedCreateWithoutPlayer_1Input[]
    connectOrCreate?: matchCreateOrConnectWithoutPlayer_1Input | matchCreateOrConnectWithoutPlayer_1Input[]
    upsert?: matchUpsertWithWhereUniqueWithoutPlayer_1Input | matchUpsertWithWhereUniqueWithoutPlayer_1Input[]
    createMany?: matchCreateManyPlayer_1InputEnvelope
    set?: matchWhereUniqueInput | matchWhereUniqueInput[]
    disconnect?: matchWhereUniqueInput | matchWhereUniqueInput[]
    delete?: matchWhereUniqueInput | matchWhereUniqueInput[]
    connect?: matchWhereUniqueInput | matchWhereUniqueInput[]
    update?: matchUpdateWithWhereUniqueWithoutPlayer_1Input | matchUpdateWithWhereUniqueWithoutPlayer_1Input[]
    updateMany?: matchUpdateManyWithWhereWithoutPlayer_1Input | matchUpdateManyWithWhereWithoutPlayer_1Input[]
    deleteMany?: matchScalarWhereInput | matchScalarWhereInput[]
  }

  export type matchUpdateManyWithoutPlayer_2NestedInput = {
    create?: XOR<matchCreateWithoutPlayer_2Input, matchUncheckedCreateWithoutPlayer_2Input> | matchCreateWithoutPlayer_2Input[] | matchUncheckedCreateWithoutPlayer_2Input[]
    connectOrCreate?: matchCreateOrConnectWithoutPlayer_2Input | matchCreateOrConnectWithoutPlayer_2Input[]
    upsert?: matchUpsertWithWhereUniqueWithoutPlayer_2Input | matchUpsertWithWhereUniqueWithoutPlayer_2Input[]
    createMany?: matchCreateManyPlayer_2InputEnvelope
    set?: matchWhereUniqueInput | matchWhereUniqueInput[]
    disconnect?: matchWhereUniqueInput | matchWhereUniqueInput[]
    delete?: matchWhereUniqueInput | matchWhereUniqueInput[]
    connect?: matchWhereUniqueInput | matchWhereUniqueInput[]
    update?: matchUpdateWithWhereUniqueWithoutPlayer_2Input | matchUpdateWithWhereUniqueWithoutPlayer_2Input[]
    updateMany?: matchUpdateManyWithWhereWithoutPlayer_2Input | matchUpdateManyWithWhereWithoutPlayer_2Input[]
    deleteMany?: matchScalarWhereInput | matchScalarWhereInput[]
  }

  export type StatsUpdateOneWithoutUserNestedInput = {
    create?: XOR<StatsCreateWithoutUserInput, StatsUncheckedCreateWithoutUserInput>
    connectOrCreate?: StatsCreateOrConnectWithoutUserInput
    upsert?: StatsUpsertWithoutUserInput
    disconnect?: StatsWhereInput | boolean
    delete?: StatsWhereInput | boolean
    connect?: StatsWhereUniqueInput
    update?: XOR<XOR<StatsUpdateToOneWithWhereWithoutUserInput, StatsUpdateWithoutUserInput>, StatsUncheckedUpdateWithoutUserInput>
  }

  export type FriendshipsUpdateManyWithoutUser1NestedInput = {
    create?: XOR<FriendshipsCreateWithoutUser1Input, FriendshipsUncheckedCreateWithoutUser1Input> | FriendshipsCreateWithoutUser1Input[] | FriendshipsUncheckedCreateWithoutUser1Input[]
    connectOrCreate?: FriendshipsCreateOrConnectWithoutUser1Input | FriendshipsCreateOrConnectWithoutUser1Input[]
    upsert?: FriendshipsUpsertWithWhereUniqueWithoutUser1Input | FriendshipsUpsertWithWhereUniqueWithoutUser1Input[]
    createMany?: FriendshipsCreateManyUser1InputEnvelope
    set?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
    disconnect?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
    delete?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
    connect?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
    update?: FriendshipsUpdateWithWhereUniqueWithoutUser1Input | FriendshipsUpdateWithWhereUniqueWithoutUser1Input[]
    updateMany?: FriendshipsUpdateManyWithWhereWithoutUser1Input | FriendshipsUpdateManyWithWhereWithoutUser1Input[]
    deleteMany?: FriendshipsScalarWhereInput | FriendshipsScalarWhereInput[]
  }

  export type FriendshipsUpdateManyWithoutUser2NestedInput = {
    create?: XOR<FriendshipsCreateWithoutUser2Input, FriendshipsUncheckedCreateWithoutUser2Input> | FriendshipsCreateWithoutUser2Input[] | FriendshipsUncheckedCreateWithoutUser2Input[]
    connectOrCreate?: FriendshipsCreateOrConnectWithoutUser2Input | FriendshipsCreateOrConnectWithoutUser2Input[]
    upsert?: FriendshipsUpsertWithWhereUniqueWithoutUser2Input | FriendshipsUpsertWithWhereUniqueWithoutUser2Input[]
    createMany?: FriendshipsCreateManyUser2InputEnvelope
    set?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
    disconnect?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
    delete?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
    connect?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
    update?: FriendshipsUpdateWithWhereUniqueWithoutUser2Input | FriendshipsUpdateWithWhereUniqueWithoutUser2Input[]
    updateMany?: FriendshipsUpdateManyWithWhereWithoutUser2Input | FriendshipsUpdateManyWithWhereWithoutUser2Input[]
    deleteMany?: FriendshipsScalarWhereInput | FriendshipsScalarWhereInput[]
  }

  export type DirectMessagingUpdateManyWithoutUser1NestedInput = {
    create?: XOR<DirectMessagingCreateWithoutUser1Input, DirectMessagingUncheckedCreateWithoutUser1Input> | DirectMessagingCreateWithoutUser1Input[] | DirectMessagingUncheckedCreateWithoutUser1Input[]
    connectOrCreate?: DirectMessagingCreateOrConnectWithoutUser1Input | DirectMessagingCreateOrConnectWithoutUser1Input[]
    upsert?: DirectMessagingUpsertWithWhereUniqueWithoutUser1Input | DirectMessagingUpsertWithWhereUniqueWithoutUser1Input[]
    createMany?: DirectMessagingCreateManyUser1InputEnvelope
    set?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
    disconnect?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
    delete?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
    connect?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
    update?: DirectMessagingUpdateWithWhereUniqueWithoutUser1Input | DirectMessagingUpdateWithWhereUniqueWithoutUser1Input[]
    updateMany?: DirectMessagingUpdateManyWithWhereWithoutUser1Input | DirectMessagingUpdateManyWithWhereWithoutUser1Input[]
    deleteMany?: DirectMessagingScalarWhereInput | DirectMessagingScalarWhereInput[]
  }

  export type DirectMessagingUpdateManyWithoutUser2NestedInput = {
    create?: XOR<DirectMessagingCreateWithoutUser2Input, DirectMessagingUncheckedCreateWithoutUser2Input> | DirectMessagingCreateWithoutUser2Input[] | DirectMessagingUncheckedCreateWithoutUser2Input[]
    connectOrCreate?: DirectMessagingCreateOrConnectWithoutUser2Input | DirectMessagingCreateOrConnectWithoutUser2Input[]
    upsert?: DirectMessagingUpsertWithWhereUniqueWithoutUser2Input | DirectMessagingUpsertWithWhereUniqueWithoutUser2Input[]
    createMany?: DirectMessagingCreateManyUser2InputEnvelope
    set?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
    disconnect?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
    delete?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
    connect?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
    update?: DirectMessagingUpdateWithWhereUniqueWithoutUser2Input | DirectMessagingUpdateWithWhereUniqueWithoutUser2Input[]
    updateMany?: DirectMessagingUpdateManyWithWhereWithoutUser2Input | DirectMessagingUpdateManyWithWhereWithoutUser2Input[]
    deleteMany?: DirectMessagingScalarWhereInput | DirectMessagingScalarWhereInput[]
  }

  export type ChannelMembershipUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChannelMembershipCreateWithoutUserInput, ChannelMembershipUncheckedCreateWithoutUserInput> | ChannelMembershipCreateWithoutUserInput[] | ChannelMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChannelMembershipCreateOrConnectWithoutUserInput | ChannelMembershipCreateOrConnectWithoutUserInput[]
    upsert?: ChannelMembershipUpsertWithWhereUniqueWithoutUserInput | ChannelMembershipUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChannelMembershipCreateManyUserInputEnvelope
    set?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
    disconnect?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
    delete?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
    connect?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
    update?: ChannelMembershipUpdateWithWhereUniqueWithoutUserInput | ChannelMembershipUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChannelMembershipUpdateManyWithWhereWithoutUserInput | ChannelMembershipUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChannelMembershipScalarWhereInput | ChannelMembershipScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutUserNestedInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutUserInput | MessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutUserInput | MessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutUserInput | MessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type matchUncheckedUpdateManyWithoutPlayer_1NestedInput = {
    create?: XOR<matchCreateWithoutPlayer_1Input, matchUncheckedCreateWithoutPlayer_1Input> | matchCreateWithoutPlayer_1Input[] | matchUncheckedCreateWithoutPlayer_1Input[]
    connectOrCreate?: matchCreateOrConnectWithoutPlayer_1Input | matchCreateOrConnectWithoutPlayer_1Input[]
    upsert?: matchUpsertWithWhereUniqueWithoutPlayer_1Input | matchUpsertWithWhereUniqueWithoutPlayer_1Input[]
    createMany?: matchCreateManyPlayer_1InputEnvelope
    set?: matchWhereUniqueInput | matchWhereUniqueInput[]
    disconnect?: matchWhereUniqueInput | matchWhereUniqueInput[]
    delete?: matchWhereUniqueInput | matchWhereUniqueInput[]
    connect?: matchWhereUniqueInput | matchWhereUniqueInput[]
    update?: matchUpdateWithWhereUniqueWithoutPlayer_1Input | matchUpdateWithWhereUniqueWithoutPlayer_1Input[]
    updateMany?: matchUpdateManyWithWhereWithoutPlayer_1Input | matchUpdateManyWithWhereWithoutPlayer_1Input[]
    deleteMany?: matchScalarWhereInput | matchScalarWhereInput[]
  }

  export type matchUncheckedUpdateManyWithoutPlayer_2NestedInput = {
    create?: XOR<matchCreateWithoutPlayer_2Input, matchUncheckedCreateWithoutPlayer_2Input> | matchCreateWithoutPlayer_2Input[] | matchUncheckedCreateWithoutPlayer_2Input[]
    connectOrCreate?: matchCreateOrConnectWithoutPlayer_2Input | matchCreateOrConnectWithoutPlayer_2Input[]
    upsert?: matchUpsertWithWhereUniqueWithoutPlayer_2Input | matchUpsertWithWhereUniqueWithoutPlayer_2Input[]
    createMany?: matchCreateManyPlayer_2InputEnvelope
    set?: matchWhereUniqueInput | matchWhereUniqueInput[]
    disconnect?: matchWhereUniqueInput | matchWhereUniqueInput[]
    delete?: matchWhereUniqueInput | matchWhereUniqueInput[]
    connect?: matchWhereUniqueInput | matchWhereUniqueInput[]
    update?: matchUpdateWithWhereUniqueWithoutPlayer_2Input | matchUpdateWithWhereUniqueWithoutPlayer_2Input[]
    updateMany?: matchUpdateManyWithWhereWithoutPlayer_2Input | matchUpdateManyWithWhereWithoutPlayer_2Input[]
    deleteMany?: matchScalarWhereInput | matchScalarWhereInput[]
  }

  export type StatsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StatsCreateWithoutUserInput, StatsUncheckedCreateWithoutUserInput>
    connectOrCreate?: StatsCreateOrConnectWithoutUserInput
    upsert?: StatsUpsertWithoutUserInput
    disconnect?: StatsWhereInput | boolean
    delete?: StatsWhereInput | boolean
    connect?: StatsWhereUniqueInput
    update?: XOR<XOR<StatsUpdateToOneWithWhereWithoutUserInput, StatsUpdateWithoutUserInput>, StatsUncheckedUpdateWithoutUserInput>
  }

  export type FriendshipsUncheckedUpdateManyWithoutUser1NestedInput = {
    create?: XOR<FriendshipsCreateWithoutUser1Input, FriendshipsUncheckedCreateWithoutUser1Input> | FriendshipsCreateWithoutUser1Input[] | FriendshipsUncheckedCreateWithoutUser1Input[]
    connectOrCreate?: FriendshipsCreateOrConnectWithoutUser1Input | FriendshipsCreateOrConnectWithoutUser1Input[]
    upsert?: FriendshipsUpsertWithWhereUniqueWithoutUser1Input | FriendshipsUpsertWithWhereUniqueWithoutUser1Input[]
    createMany?: FriendshipsCreateManyUser1InputEnvelope
    set?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
    disconnect?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
    delete?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
    connect?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
    update?: FriendshipsUpdateWithWhereUniqueWithoutUser1Input | FriendshipsUpdateWithWhereUniqueWithoutUser1Input[]
    updateMany?: FriendshipsUpdateManyWithWhereWithoutUser1Input | FriendshipsUpdateManyWithWhereWithoutUser1Input[]
    deleteMany?: FriendshipsScalarWhereInput | FriendshipsScalarWhereInput[]
  }

  export type FriendshipsUncheckedUpdateManyWithoutUser2NestedInput = {
    create?: XOR<FriendshipsCreateWithoutUser2Input, FriendshipsUncheckedCreateWithoutUser2Input> | FriendshipsCreateWithoutUser2Input[] | FriendshipsUncheckedCreateWithoutUser2Input[]
    connectOrCreate?: FriendshipsCreateOrConnectWithoutUser2Input | FriendshipsCreateOrConnectWithoutUser2Input[]
    upsert?: FriendshipsUpsertWithWhereUniqueWithoutUser2Input | FriendshipsUpsertWithWhereUniqueWithoutUser2Input[]
    createMany?: FriendshipsCreateManyUser2InputEnvelope
    set?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
    disconnect?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
    delete?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
    connect?: FriendshipsWhereUniqueInput | FriendshipsWhereUniqueInput[]
    update?: FriendshipsUpdateWithWhereUniqueWithoutUser2Input | FriendshipsUpdateWithWhereUniqueWithoutUser2Input[]
    updateMany?: FriendshipsUpdateManyWithWhereWithoutUser2Input | FriendshipsUpdateManyWithWhereWithoutUser2Input[]
    deleteMany?: FriendshipsScalarWhereInput | FriendshipsScalarWhereInput[]
  }

  export type DirectMessagingUncheckedUpdateManyWithoutUser1NestedInput = {
    create?: XOR<DirectMessagingCreateWithoutUser1Input, DirectMessagingUncheckedCreateWithoutUser1Input> | DirectMessagingCreateWithoutUser1Input[] | DirectMessagingUncheckedCreateWithoutUser1Input[]
    connectOrCreate?: DirectMessagingCreateOrConnectWithoutUser1Input | DirectMessagingCreateOrConnectWithoutUser1Input[]
    upsert?: DirectMessagingUpsertWithWhereUniqueWithoutUser1Input | DirectMessagingUpsertWithWhereUniqueWithoutUser1Input[]
    createMany?: DirectMessagingCreateManyUser1InputEnvelope
    set?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
    disconnect?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
    delete?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
    connect?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
    update?: DirectMessagingUpdateWithWhereUniqueWithoutUser1Input | DirectMessagingUpdateWithWhereUniqueWithoutUser1Input[]
    updateMany?: DirectMessagingUpdateManyWithWhereWithoutUser1Input | DirectMessagingUpdateManyWithWhereWithoutUser1Input[]
    deleteMany?: DirectMessagingScalarWhereInput | DirectMessagingScalarWhereInput[]
  }

  export type DirectMessagingUncheckedUpdateManyWithoutUser2NestedInput = {
    create?: XOR<DirectMessagingCreateWithoutUser2Input, DirectMessagingUncheckedCreateWithoutUser2Input> | DirectMessagingCreateWithoutUser2Input[] | DirectMessagingUncheckedCreateWithoutUser2Input[]
    connectOrCreate?: DirectMessagingCreateOrConnectWithoutUser2Input | DirectMessagingCreateOrConnectWithoutUser2Input[]
    upsert?: DirectMessagingUpsertWithWhereUniqueWithoutUser2Input | DirectMessagingUpsertWithWhereUniqueWithoutUser2Input[]
    createMany?: DirectMessagingCreateManyUser2InputEnvelope
    set?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
    disconnect?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
    delete?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
    connect?: DirectMessagingWhereUniqueInput | DirectMessagingWhereUniqueInput[]
    update?: DirectMessagingUpdateWithWhereUniqueWithoutUser2Input | DirectMessagingUpdateWithWhereUniqueWithoutUser2Input[]
    updateMany?: DirectMessagingUpdateManyWithWhereWithoutUser2Input | DirectMessagingUpdateManyWithWhereWithoutUser2Input[]
    deleteMany?: DirectMessagingScalarWhereInput | DirectMessagingScalarWhereInput[]
  }

  export type ChannelMembershipUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChannelMembershipCreateWithoutUserInput, ChannelMembershipUncheckedCreateWithoutUserInput> | ChannelMembershipCreateWithoutUserInput[] | ChannelMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChannelMembershipCreateOrConnectWithoutUserInput | ChannelMembershipCreateOrConnectWithoutUserInput[]
    upsert?: ChannelMembershipUpsertWithWhereUniqueWithoutUserInput | ChannelMembershipUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChannelMembershipCreateManyUserInputEnvelope
    set?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
    disconnect?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
    delete?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
    connect?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
    update?: ChannelMembershipUpdateWithWhereUniqueWithoutUserInput | ChannelMembershipUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChannelMembershipUpdateManyWithWhereWithoutUserInput | ChannelMembershipUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChannelMembershipScalarWhereInput | ChannelMembershipScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutUserInput | MessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutUserInput | MessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutUserInput | MessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMatch_hostInput = {
    create?: XOR<UserCreateWithoutMatch_hostInput, UserUncheckedCreateWithoutMatch_hostInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatch_hostInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMatch_guestInput = {
    create?: XOR<UserCreateWithoutMatch_guestInput, UserUncheckedCreateWithoutMatch_guestInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatch_guestInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMatch_hostNestedInput = {
    create?: XOR<UserCreateWithoutMatch_hostInput, UserUncheckedCreateWithoutMatch_hostInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatch_hostInput
    upsert?: UserUpsertWithoutMatch_hostInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMatch_hostInput, UserUpdateWithoutMatch_hostInput>, UserUncheckedUpdateWithoutMatch_hostInput>
  }

  export type UserUpdateOneRequiredWithoutMatch_guestNestedInput = {
    create?: XOR<UserCreateWithoutMatch_guestInput, UserUncheckedCreateWithoutMatch_guestInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatch_guestInput
    upsert?: UserUpsertWithoutMatch_guestInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMatch_guestInput, UserUpdateWithoutMatch_guestInput>, UserUncheckedUpdateWithoutMatch_guestInput>
  }

  export type UserCreateNestedOneWithoutStatsInput = {
    create?: XOR<UserCreateWithoutStatsInput, UserUncheckedCreateWithoutStatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatsInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutStatsNestedInput = {
    create?: XOR<UserCreateWithoutStatsInput, UserUncheckedCreateWithoutStatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatsInput
    upsert?: UserUpsertWithoutStatsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStatsInput, UserUpdateWithoutStatsInput>, UserUncheckedUpdateWithoutStatsInput>
  }

  export type UserCreateNestedOneWithoutInvitedInput = {
    create?: XOR<UserCreateWithoutInvitedInput, UserUncheckedCreateWithoutInvitedInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvitedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutInvitorInput = {
    create?: XOR<UserCreateWithoutInvitorInput, UserUncheckedCreateWithoutInvitorInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvitorInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumRelationStatusFieldUpdateOperationsInput = {
    set?: RelationStatus
  }

  export type UserUpdateOneRequiredWithoutInvitedNestedInput = {
    create?: XOR<UserCreateWithoutInvitedInput, UserUncheckedCreateWithoutInvitedInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvitedInput
    upsert?: UserUpsertWithoutInvitedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInvitedInput, UserUpdateWithoutInvitedInput>, UserUncheckedUpdateWithoutInvitedInput>
  }

  export type UserUpdateOneRequiredWithoutInvitorNestedInput = {
    create?: XOR<UserCreateWithoutInvitorInput, UserUncheckedCreateWithoutInvitorInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvitorInput
    upsert?: UserUpsertWithoutInvitorInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInvitorInput, UserUpdateWithoutInvitorInput>, UserUncheckedUpdateWithoutInvitorInput>
  }

  export type ChannelCreateNestedOneWithoutMemeberShipsInput = {
    create?: XOR<ChannelCreateWithoutMemeberShipsInput, ChannelUncheckedCreateWithoutMemeberShipsInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMemeberShipsInput
    connect?: ChannelWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChannelsInput = {
    create?: XOR<UserCreateWithoutChannelsInput, UserUncheckedCreateWithoutChannelsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChannelsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ChannelUpdateOneRequiredWithoutMemeberShipsNestedInput = {
    create?: XOR<ChannelCreateWithoutMemeberShipsInput, ChannelUncheckedCreateWithoutMemeberShipsInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMemeberShipsInput
    upsert?: ChannelUpsertWithoutMemeberShipsInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<XOR<ChannelUpdateToOneWithWhereWithoutMemeberShipsInput, ChannelUpdateWithoutMemeberShipsInput>, ChannelUncheckedUpdateWithoutMemeberShipsInput>
  }

  export type UserUpdateOneRequiredWithoutChannelsNestedInput = {
    create?: XOR<UserCreateWithoutChannelsInput, UserUncheckedCreateWithoutChannelsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChannelsInput
    upsert?: UserUpsertWithoutChannelsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChannelsInput, UserUpdateWithoutChannelsInput>, UserUncheckedUpdateWithoutChannelsInput>
  }

  export type UserCreateNestedOneWithoutMessagesInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type ChannelCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMessagesInput
    connect?: ChannelWhereUniqueInput
  }

  export type DirectMessagingCreateNestedOneWithoutMessagesInput = {
    create?: XOR<DirectMessagingCreateWithoutMessagesInput, DirectMessagingUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: DirectMessagingCreateOrConnectWithoutMessagesInput
    connect?: DirectMessagingWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type UserUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    upsert?: UserUpsertWithoutMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesInput, UserUpdateWithoutMessagesInput>, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type ChannelUpdateOneWithoutMessagesNestedInput = {
    create?: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMessagesInput
    upsert?: ChannelUpsertWithoutMessagesInput
    disconnect?: ChannelWhereInput | boolean
    delete?: ChannelWhereInput | boolean
    connect?: ChannelWhereUniqueInput
    update?: XOR<XOR<ChannelUpdateToOneWithWhereWithoutMessagesInput, ChannelUpdateWithoutMessagesInput>, ChannelUncheckedUpdateWithoutMessagesInput>
  }

  export type DirectMessagingUpdateOneWithoutMessagesNestedInput = {
    create?: XOR<DirectMessagingCreateWithoutMessagesInput, DirectMessagingUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: DirectMessagingCreateOrConnectWithoutMessagesInput
    upsert?: DirectMessagingUpsertWithoutMessagesInput
    disconnect?: DirectMessagingWhereInput | boolean
    delete?: DirectMessagingWhereInput | boolean
    connect?: DirectMessagingWhereUniqueInput
    update?: XOR<XOR<DirectMessagingUpdateToOneWithWhereWithoutMessagesInput, DirectMessagingUpdateWithoutMessagesInput>, DirectMessagingUncheckedUpdateWithoutMessagesInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ChannelMembershipCreateNestedManyWithoutChannelInput = {
    create?: XOR<ChannelMembershipCreateWithoutChannelInput, ChannelMembershipUncheckedCreateWithoutChannelInput> | ChannelMembershipCreateWithoutChannelInput[] | ChannelMembershipUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: ChannelMembershipCreateOrConnectWithoutChannelInput | ChannelMembershipCreateOrConnectWithoutChannelInput[]
    createMany?: ChannelMembershipCreateManyChannelInputEnvelope
    connect?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutChannelInput = {
    create?: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput> | MessageCreateWithoutChannelInput[] | MessageUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChannelInput | MessageCreateOrConnectWithoutChannelInput[]
    createMany?: MessageCreateManyChannelInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ChannelMembershipUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<ChannelMembershipCreateWithoutChannelInput, ChannelMembershipUncheckedCreateWithoutChannelInput> | ChannelMembershipCreateWithoutChannelInput[] | ChannelMembershipUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: ChannelMembershipCreateOrConnectWithoutChannelInput | ChannelMembershipCreateOrConnectWithoutChannelInput[]
    createMany?: ChannelMembershipCreateManyChannelInputEnvelope
    connect?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput> | MessageCreateWithoutChannelInput[] | MessageUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChannelInput | MessageCreateOrConnectWithoutChannelInput[]
    createMany?: MessageCreateManyChannelInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type EnumChannel_typeFieldUpdateOperationsInput = {
    set?: Channel_type
  }

  export type ChannelMembershipUpdateManyWithoutChannelNestedInput = {
    create?: XOR<ChannelMembershipCreateWithoutChannelInput, ChannelMembershipUncheckedCreateWithoutChannelInput> | ChannelMembershipCreateWithoutChannelInput[] | ChannelMembershipUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: ChannelMembershipCreateOrConnectWithoutChannelInput | ChannelMembershipCreateOrConnectWithoutChannelInput[]
    upsert?: ChannelMembershipUpsertWithWhereUniqueWithoutChannelInput | ChannelMembershipUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: ChannelMembershipCreateManyChannelInputEnvelope
    set?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
    disconnect?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
    delete?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
    connect?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
    update?: ChannelMembershipUpdateWithWhereUniqueWithoutChannelInput | ChannelMembershipUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: ChannelMembershipUpdateManyWithWhereWithoutChannelInput | ChannelMembershipUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: ChannelMembershipScalarWhereInput | ChannelMembershipScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutChannelNestedInput = {
    create?: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput> | MessageCreateWithoutChannelInput[] | MessageUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChannelInput | MessageCreateOrConnectWithoutChannelInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChannelInput | MessageUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: MessageCreateManyChannelInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChannelInput | MessageUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChannelInput | MessageUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ChannelMembershipUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<ChannelMembershipCreateWithoutChannelInput, ChannelMembershipUncheckedCreateWithoutChannelInput> | ChannelMembershipCreateWithoutChannelInput[] | ChannelMembershipUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: ChannelMembershipCreateOrConnectWithoutChannelInput | ChannelMembershipCreateOrConnectWithoutChannelInput[]
    upsert?: ChannelMembershipUpsertWithWhereUniqueWithoutChannelInput | ChannelMembershipUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: ChannelMembershipCreateManyChannelInputEnvelope
    set?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
    disconnect?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
    delete?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
    connect?: ChannelMembershipWhereUniqueInput | ChannelMembershipWhereUniqueInput[]
    update?: ChannelMembershipUpdateWithWhereUniqueWithoutChannelInput | ChannelMembershipUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: ChannelMembershipUpdateManyWithWhereWithoutChannelInput | ChannelMembershipUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: ChannelMembershipScalarWhereInput | ChannelMembershipScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput> | MessageCreateWithoutChannelInput[] | MessageUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChannelInput | MessageCreateOrConnectWithoutChannelInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChannelInput | MessageUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: MessageCreateManyChannelInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChannelInput | MessageUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChannelInput | MessageUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutInitiatorInput = {
    create?: XOR<UserCreateWithoutInitiatorInput, UserUncheckedCreateWithoutInitiatorInput>
    connectOrCreate?: UserCreateOrConnectWithoutInitiatorInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceiverInput = {
    create?: XOR<UserCreateWithoutReceiverInput, UserUncheckedCreateWithoutReceiverInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceiverInput
    connect?: UserWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutDmInput = {
    create?: XOR<MessageCreateWithoutDmInput, MessageUncheckedCreateWithoutDmInput> | MessageCreateWithoutDmInput[] | MessageUncheckedCreateWithoutDmInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutDmInput | MessageCreateOrConnectWithoutDmInput[]
    createMany?: MessageCreateManyDmInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutDmInput = {
    create?: XOR<MessageCreateWithoutDmInput, MessageUncheckedCreateWithoutDmInput> | MessageCreateWithoutDmInput[] | MessageUncheckedCreateWithoutDmInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutDmInput | MessageCreateOrConnectWithoutDmInput[]
    createMany?: MessageCreateManyDmInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type EnumDmStatusFieldUpdateOperationsInput = {
    set?: DmStatus
  }

  export type UserUpdateOneRequiredWithoutInitiatorNestedInput = {
    create?: XOR<UserCreateWithoutInitiatorInput, UserUncheckedCreateWithoutInitiatorInput>
    connectOrCreate?: UserCreateOrConnectWithoutInitiatorInput
    upsert?: UserUpsertWithoutInitiatorInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInitiatorInput, UserUpdateWithoutInitiatorInput>, UserUncheckedUpdateWithoutInitiatorInput>
  }

  export type UserUpdateOneRequiredWithoutReceiverNestedInput = {
    create?: XOR<UserCreateWithoutReceiverInput, UserUncheckedCreateWithoutReceiverInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceiverInput
    upsert?: UserUpsertWithoutReceiverInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceiverInput, UserUpdateWithoutReceiverInput>, UserUncheckedUpdateWithoutReceiverInput>
  }

  export type MessageUpdateManyWithoutDmNestedInput = {
    create?: XOR<MessageCreateWithoutDmInput, MessageUncheckedCreateWithoutDmInput> | MessageCreateWithoutDmInput[] | MessageUncheckedCreateWithoutDmInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutDmInput | MessageCreateOrConnectWithoutDmInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutDmInput | MessageUpsertWithWhereUniqueWithoutDmInput[]
    createMany?: MessageCreateManyDmInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutDmInput | MessageUpdateWithWhereUniqueWithoutDmInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutDmInput | MessageUpdateManyWithWhereWithoutDmInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutDmNestedInput = {
    create?: XOR<MessageCreateWithoutDmInput, MessageUncheckedCreateWithoutDmInput> | MessageCreateWithoutDmInput[] | MessageUncheckedCreateWithoutDmInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutDmInput | MessageCreateOrConnectWithoutDmInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutDmInput | MessageUpsertWithWhereUniqueWithoutDmInput[]
    createMany?: MessageCreateManyDmInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutDmInput | MessageUpdateWithWhereUniqueWithoutDmInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutDmInput | MessageUpdateManyWithWhereWithoutDmInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: NotificationType
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | Status
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumRelationStatusFilter<$PrismaModel = never> = {
    equals?: RelationStatus | EnumRelationStatusFieldRefInput<$PrismaModel>
    in?: RelationStatus[] | ListEnumRelationStatusFieldRefInput<$PrismaModel>
    notIn?: RelationStatus[] | ListEnumRelationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRelationStatusFilter<$PrismaModel> | RelationStatus
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumRelationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: RelationStatus | EnumRelationStatusFieldRefInput<$PrismaModel>
    in?: RelationStatus[] | ListEnumRelationStatusFieldRefInput<$PrismaModel>
    notIn?: RelationStatus[] | ListEnumRelationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRelationStatusWithAggregatesFilter<$PrismaModel> | RelationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRelationStatusFilter<$PrismaModel>
    _max?: NestedEnumRelationStatusFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | Role
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumChannel_typeFilter<$PrismaModel = never> = {
    equals?: Channel_type | EnumChannel_typeFieldRefInput<$PrismaModel>
    in?: Channel_type[] | ListEnumChannel_typeFieldRefInput<$PrismaModel>
    notIn?: Channel_type[] | ListEnumChannel_typeFieldRefInput<$PrismaModel>
    not?: NestedEnumChannel_typeFilter<$PrismaModel> | Channel_type
  }

  export type NestedEnumChannel_typeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Channel_type | EnumChannel_typeFieldRefInput<$PrismaModel>
    in?: Channel_type[] | ListEnumChannel_typeFieldRefInput<$PrismaModel>
    notIn?: Channel_type[] | ListEnumChannel_typeFieldRefInput<$PrismaModel>
    not?: NestedEnumChannel_typeWithAggregatesFilter<$PrismaModel> | Channel_type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChannel_typeFilter<$PrismaModel>
    _max?: NestedEnumChannel_typeFilter<$PrismaModel>
  }

  export type NestedEnumDmStatusFilter<$PrismaModel = never> = {
    equals?: DmStatus | EnumDmStatusFieldRefInput<$PrismaModel>
    in?: DmStatus[] | ListEnumDmStatusFieldRefInput<$PrismaModel>
    notIn?: DmStatus[] | ListEnumDmStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDmStatusFilter<$PrismaModel> | DmStatus
  }

  export type NestedEnumDmStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: DmStatus | EnumDmStatusFieldRefInput<$PrismaModel>
    in?: DmStatus[] | ListEnumDmStatusFieldRefInput<$PrismaModel>
    notIn?: DmStatus[] | ListEnumDmStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDmStatusWithAggregatesFilter<$PrismaModel> | DmStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDmStatusFilter<$PrismaModel>
    _max?: NestedEnumDmStatusFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type matchCreateWithoutPlayer_1Input = {
    id?: string
    result: string
    player_2: UserCreateNestedOneWithoutMatch_guestInput
  }

  export type matchUncheckedCreateWithoutPlayer_1Input = {
    id?: string
    player_2_id: string
    result: string
  }

  export type matchCreateOrConnectWithoutPlayer_1Input = {
    where: matchWhereUniqueInput
    create: XOR<matchCreateWithoutPlayer_1Input, matchUncheckedCreateWithoutPlayer_1Input>
  }

  export type matchCreateManyPlayer_1InputEnvelope = {
    data: matchCreateManyPlayer_1Input | matchCreateManyPlayer_1Input[]
    skipDuplicates?: boolean
  }

  export type matchCreateWithoutPlayer_2Input = {
    id?: string
    result: string
    player_1: UserCreateNestedOneWithoutMatch_hostInput
  }

  export type matchUncheckedCreateWithoutPlayer_2Input = {
    id?: string
    player_1_id: string
    result: string
  }

  export type matchCreateOrConnectWithoutPlayer_2Input = {
    where: matchWhereUniqueInput
    create: XOR<matchCreateWithoutPlayer_2Input, matchUncheckedCreateWithoutPlayer_2Input>
  }

  export type matchCreateManyPlayer_2InputEnvelope = {
    data: matchCreateManyPlayer_2Input | matchCreateManyPlayer_2Input[]
    skipDuplicates?: boolean
  }

  export type StatsCreateWithoutUserInput = {
    id?: string
    wins?: number
    losses?: number
    ladder_level?: number
  }

  export type StatsUncheckedCreateWithoutUserInput = {
    id?: string
    wins?: number
    losses?: number
    ladder_level?: number
  }

  export type StatsCreateOrConnectWithoutUserInput = {
    where: StatsWhereUniqueInput
    create: XOR<StatsCreateWithoutUserInput, StatsUncheckedCreateWithoutUserInput>
  }

  export type FriendshipsCreateWithoutUser1Input = {
    id?: string
    createdAt?: Date | string
    relationStatus?: RelationStatus
    user2: UserCreateNestedOneWithoutInvitorInput
  }

  export type FriendshipsUncheckedCreateWithoutUser1Input = {
    id?: string
    user2_id: string
    createdAt?: Date | string
    relationStatus?: RelationStatus
  }

  export type FriendshipsCreateOrConnectWithoutUser1Input = {
    where: FriendshipsWhereUniqueInput
    create: XOR<FriendshipsCreateWithoutUser1Input, FriendshipsUncheckedCreateWithoutUser1Input>
  }

  export type FriendshipsCreateManyUser1InputEnvelope = {
    data: FriendshipsCreateManyUser1Input | FriendshipsCreateManyUser1Input[]
    skipDuplicates?: boolean
  }

  export type FriendshipsCreateWithoutUser2Input = {
    id?: string
    createdAt?: Date | string
    relationStatus?: RelationStatus
    user1: UserCreateNestedOneWithoutInvitedInput
  }

  export type FriendshipsUncheckedCreateWithoutUser2Input = {
    id?: string
    user1_id: string
    createdAt?: Date | string
    relationStatus?: RelationStatus
  }

  export type FriendshipsCreateOrConnectWithoutUser2Input = {
    where: FriendshipsWhereUniqueInput
    create: XOR<FriendshipsCreateWithoutUser2Input, FriendshipsUncheckedCreateWithoutUser2Input>
  }

  export type FriendshipsCreateManyUser2InputEnvelope = {
    data: FriendshipsCreateManyUser2Input | FriendshipsCreateManyUser2Input[]
    skipDuplicates?: boolean
  }

  export type DirectMessagingCreateWithoutUser1Input = {
    id?: string
    status?: DmStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user2: UserCreateNestedOneWithoutReceiverInput
    messages?: MessageCreateNestedManyWithoutDmInput
  }

  export type DirectMessagingUncheckedCreateWithoutUser1Input = {
    id?: string
    user2_id: string
    status?: DmStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutDmInput
  }

  export type DirectMessagingCreateOrConnectWithoutUser1Input = {
    where: DirectMessagingWhereUniqueInput
    create: XOR<DirectMessagingCreateWithoutUser1Input, DirectMessagingUncheckedCreateWithoutUser1Input>
  }

  export type DirectMessagingCreateManyUser1InputEnvelope = {
    data: DirectMessagingCreateManyUser1Input | DirectMessagingCreateManyUser1Input[]
    skipDuplicates?: boolean
  }

  export type DirectMessagingCreateWithoutUser2Input = {
    id?: string
    status?: DmStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user1: UserCreateNestedOneWithoutInitiatorInput
    messages?: MessageCreateNestedManyWithoutDmInput
  }

  export type DirectMessagingUncheckedCreateWithoutUser2Input = {
    id?: string
    user1_id: string
    status?: DmStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutDmInput
  }

  export type DirectMessagingCreateOrConnectWithoutUser2Input = {
    where: DirectMessagingWhereUniqueInput
    create: XOR<DirectMessagingCreateWithoutUser2Input, DirectMessagingUncheckedCreateWithoutUser2Input>
  }

  export type DirectMessagingCreateManyUser2InputEnvelope = {
    data: DirectMessagingCreateManyUser2Input | DirectMessagingCreateManyUser2Input[]
    skipDuplicates?: boolean
  }

  export type ChannelMembershipCreateWithoutUserInput = {
    id?: string
    role: Role
    joined_at?: Date | string
    is_banned?: boolean
    banned_at?: Date | string | null
    channel: ChannelCreateNestedOneWithoutMemeberShipsInput
  }

  export type ChannelMembershipUncheckedCreateWithoutUserInput = {
    id?: string
    channel_id: string
    role: Role
    joined_at?: Date | string
    is_banned?: boolean
    banned_at?: Date | string | null
  }

  export type ChannelMembershipCreateOrConnectWithoutUserInput = {
    where: ChannelMembershipWhereUniqueInput
    create: XOR<ChannelMembershipCreateWithoutUserInput, ChannelMembershipUncheckedCreateWithoutUserInput>
  }

  export type ChannelMembershipCreateManyUserInputEnvelope = {
    data: ChannelMembershipCreateManyUserInput | ChannelMembershipCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string | null
    is_read?: boolean | null
    channel?: ChannelCreateNestedOneWithoutMessagesInput
    dm?: DirectMessagingCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutUserInput = {
    id?: string
    channel_id?: string | null
    dm_id?: string | null
    content: string
    createdAt?: Date | string | null
    is_read?: boolean | null
  }

  export type MessageCreateOrConnectWithoutUserInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput>
  }

  export type MessageCreateManyUserInputEnvelope = {
    data: MessageCreateManyUserInput | MessageCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    type: NotificationType
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    type: NotificationType
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type matchUpsertWithWhereUniqueWithoutPlayer_1Input = {
    where: matchWhereUniqueInput
    update: XOR<matchUpdateWithoutPlayer_1Input, matchUncheckedUpdateWithoutPlayer_1Input>
    create: XOR<matchCreateWithoutPlayer_1Input, matchUncheckedCreateWithoutPlayer_1Input>
  }

  export type matchUpdateWithWhereUniqueWithoutPlayer_1Input = {
    where: matchWhereUniqueInput
    data: XOR<matchUpdateWithoutPlayer_1Input, matchUncheckedUpdateWithoutPlayer_1Input>
  }

  export type matchUpdateManyWithWhereWithoutPlayer_1Input = {
    where: matchScalarWhereInput
    data: XOR<matchUpdateManyMutationInput, matchUncheckedUpdateManyWithoutPlayer_1Input>
  }

  export type matchScalarWhereInput = {
    AND?: matchScalarWhereInput | matchScalarWhereInput[]
    OR?: matchScalarWhereInput[]
    NOT?: matchScalarWhereInput | matchScalarWhereInput[]
    id?: StringFilter<"match"> | string
    player_1_id?: StringFilter<"match"> | string
    player_2_id?: StringFilter<"match"> | string
    result?: StringFilter<"match"> | string
  }

  export type matchUpsertWithWhereUniqueWithoutPlayer_2Input = {
    where: matchWhereUniqueInput
    update: XOR<matchUpdateWithoutPlayer_2Input, matchUncheckedUpdateWithoutPlayer_2Input>
    create: XOR<matchCreateWithoutPlayer_2Input, matchUncheckedCreateWithoutPlayer_2Input>
  }

  export type matchUpdateWithWhereUniqueWithoutPlayer_2Input = {
    where: matchWhereUniqueInput
    data: XOR<matchUpdateWithoutPlayer_2Input, matchUncheckedUpdateWithoutPlayer_2Input>
  }

  export type matchUpdateManyWithWhereWithoutPlayer_2Input = {
    where: matchScalarWhereInput
    data: XOR<matchUpdateManyMutationInput, matchUncheckedUpdateManyWithoutPlayer_2Input>
  }

  export type StatsUpsertWithoutUserInput = {
    update: XOR<StatsUpdateWithoutUserInput, StatsUncheckedUpdateWithoutUserInput>
    create: XOR<StatsCreateWithoutUserInput, StatsUncheckedCreateWithoutUserInput>
    where?: StatsWhereInput
  }

  export type StatsUpdateToOneWithWhereWithoutUserInput = {
    where?: StatsWhereInput
    data: XOR<StatsUpdateWithoutUserInput, StatsUncheckedUpdateWithoutUserInput>
  }

  export type StatsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
  }

  export type StatsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
  }

  export type FriendshipsUpsertWithWhereUniqueWithoutUser1Input = {
    where: FriendshipsWhereUniqueInput
    update: XOR<FriendshipsUpdateWithoutUser1Input, FriendshipsUncheckedUpdateWithoutUser1Input>
    create: XOR<FriendshipsCreateWithoutUser1Input, FriendshipsUncheckedCreateWithoutUser1Input>
  }

  export type FriendshipsUpdateWithWhereUniqueWithoutUser1Input = {
    where: FriendshipsWhereUniqueInput
    data: XOR<FriendshipsUpdateWithoutUser1Input, FriendshipsUncheckedUpdateWithoutUser1Input>
  }

  export type FriendshipsUpdateManyWithWhereWithoutUser1Input = {
    where: FriendshipsScalarWhereInput
    data: XOR<FriendshipsUpdateManyMutationInput, FriendshipsUncheckedUpdateManyWithoutUser1Input>
  }

  export type FriendshipsScalarWhereInput = {
    AND?: FriendshipsScalarWhereInput | FriendshipsScalarWhereInput[]
    OR?: FriendshipsScalarWhereInput[]
    NOT?: FriendshipsScalarWhereInput | FriendshipsScalarWhereInput[]
    id?: StringFilter<"Friendships"> | string
    user1_id?: StringFilter<"Friendships"> | string
    user2_id?: StringFilter<"Friendships"> | string
    createdAt?: DateTimeFilter<"Friendships"> | Date | string
    relationStatus?: EnumRelationStatusFilter<"Friendships"> | RelationStatus
  }

  export type FriendshipsUpsertWithWhereUniqueWithoutUser2Input = {
    where: FriendshipsWhereUniqueInput
    update: XOR<FriendshipsUpdateWithoutUser2Input, FriendshipsUncheckedUpdateWithoutUser2Input>
    create: XOR<FriendshipsCreateWithoutUser2Input, FriendshipsUncheckedCreateWithoutUser2Input>
  }

  export type FriendshipsUpdateWithWhereUniqueWithoutUser2Input = {
    where: FriendshipsWhereUniqueInput
    data: XOR<FriendshipsUpdateWithoutUser2Input, FriendshipsUncheckedUpdateWithoutUser2Input>
  }

  export type FriendshipsUpdateManyWithWhereWithoutUser2Input = {
    where: FriendshipsScalarWhereInput
    data: XOR<FriendshipsUpdateManyMutationInput, FriendshipsUncheckedUpdateManyWithoutUser2Input>
  }

  export type DirectMessagingUpsertWithWhereUniqueWithoutUser1Input = {
    where: DirectMessagingWhereUniqueInput
    update: XOR<DirectMessagingUpdateWithoutUser1Input, DirectMessagingUncheckedUpdateWithoutUser1Input>
    create: XOR<DirectMessagingCreateWithoutUser1Input, DirectMessagingUncheckedCreateWithoutUser1Input>
  }

  export type DirectMessagingUpdateWithWhereUniqueWithoutUser1Input = {
    where: DirectMessagingWhereUniqueInput
    data: XOR<DirectMessagingUpdateWithoutUser1Input, DirectMessagingUncheckedUpdateWithoutUser1Input>
  }

  export type DirectMessagingUpdateManyWithWhereWithoutUser1Input = {
    where: DirectMessagingScalarWhereInput
    data: XOR<DirectMessagingUpdateManyMutationInput, DirectMessagingUncheckedUpdateManyWithoutUser1Input>
  }

  export type DirectMessagingScalarWhereInput = {
    AND?: DirectMessagingScalarWhereInput | DirectMessagingScalarWhereInput[]
    OR?: DirectMessagingScalarWhereInput[]
    NOT?: DirectMessagingScalarWhereInput | DirectMessagingScalarWhereInput[]
    id?: StringFilter<"DirectMessaging"> | string
    user1_id?: StringFilter<"DirectMessaging"> | string
    user2_id?: StringFilter<"DirectMessaging"> | string
    status?: EnumDmStatusFilter<"DirectMessaging"> | DmStatus
    createdAt?: DateTimeFilter<"DirectMessaging"> | Date | string
    updatedAt?: DateTimeFilter<"DirectMessaging"> | Date | string
  }

  export type DirectMessagingUpsertWithWhereUniqueWithoutUser2Input = {
    where: DirectMessagingWhereUniqueInput
    update: XOR<DirectMessagingUpdateWithoutUser2Input, DirectMessagingUncheckedUpdateWithoutUser2Input>
    create: XOR<DirectMessagingCreateWithoutUser2Input, DirectMessagingUncheckedCreateWithoutUser2Input>
  }

  export type DirectMessagingUpdateWithWhereUniqueWithoutUser2Input = {
    where: DirectMessagingWhereUniqueInput
    data: XOR<DirectMessagingUpdateWithoutUser2Input, DirectMessagingUncheckedUpdateWithoutUser2Input>
  }

  export type DirectMessagingUpdateManyWithWhereWithoutUser2Input = {
    where: DirectMessagingScalarWhereInput
    data: XOR<DirectMessagingUpdateManyMutationInput, DirectMessagingUncheckedUpdateManyWithoutUser2Input>
  }

  export type ChannelMembershipUpsertWithWhereUniqueWithoutUserInput = {
    where: ChannelMembershipWhereUniqueInput
    update: XOR<ChannelMembershipUpdateWithoutUserInput, ChannelMembershipUncheckedUpdateWithoutUserInput>
    create: XOR<ChannelMembershipCreateWithoutUserInput, ChannelMembershipUncheckedCreateWithoutUserInput>
  }

  export type ChannelMembershipUpdateWithWhereUniqueWithoutUserInput = {
    where: ChannelMembershipWhereUniqueInput
    data: XOR<ChannelMembershipUpdateWithoutUserInput, ChannelMembershipUncheckedUpdateWithoutUserInput>
  }

  export type ChannelMembershipUpdateManyWithWhereWithoutUserInput = {
    where: ChannelMembershipScalarWhereInput
    data: XOR<ChannelMembershipUpdateManyMutationInput, ChannelMembershipUncheckedUpdateManyWithoutUserInput>
  }

  export type ChannelMembershipScalarWhereInput = {
    AND?: ChannelMembershipScalarWhereInput | ChannelMembershipScalarWhereInput[]
    OR?: ChannelMembershipScalarWhereInput[]
    NOT?: ChannelMembershipScalarWhereInput | ChannelMembershipScalarWhereInput[]
    id?: StringFilter<"ChannelMembership"> | string
    channel_id?: StringFilter<"ChannelMembership"> | string
    user_id?: StringFilter<"ChannelMembership"> | string
    role?: EnumRoleFilter<"ChannelMembership"> | Role
    joined_at?: DateTimeFilter<"ChannelMembership"> | Date | string
    is_banned?: BoolFilter<"ChannelMembership"> | boolean
    banned_at?: DateTimeNullableFilter<"ChannelMembership"> | Date | string | null
  }

  export type MessageUpsertWithWhereUniqueWithoutUserInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutUserInput, MessageUncheckedUpdateWithoutUserInput>
    create: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutUserInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutUserInput, MessageUncheckedUpdateWithoutUserInput>
  }

  export type MessageUpdateManyWithWhereWithoutUserInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutUserInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    user_id?: StringFilter<"Message"> | string
    channel_id?: StringNullableFilter<"Message"> | string | null
    dm_id?: StringNullableFilter<"Message"> | string | null
    content?: StringFilter<"Message"> | string
    createdAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    is_read?: BoolNullableFilter<"Message"> | boolean | null
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    user_id?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | NotificationType
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type UserCreateWithoutMatch_hostInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_guest?: matchCreateNestedManyWithoutPlayer_2Input
    stats?: StatsCreateNestedOneWithoutUserInput
    invited?: FriendshipsCreateNestedManyWithoutUser1Input
    invitor?: FriendshipsCreateNestedManyWithoutUser2Input
    initiator?: DirectMessagingCreateNestedManyWithoutUser1Input
    receiver?: DirectMessagingCreateNestedManyWithoutUser2Input
    channels?: ChannelMembershipCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMatch_hostInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_guest?: matchUncheckedCreateNestedManyWithoutPlayer_2Input
    stats?: StatsUncheckedCreateNestedOneWithoutUserInput
    invited?: FriendshipsUncheckedCreateNestedManyWithoutUser1Input
    invitor?: FriendshipsUncheckedCreateNestedManyWithoutUser2Input
    initiator?: DirectMessagingUncheckedCreateNestedManyWithoutUser1Input
    receiver?: DirectMessagingUncheckedCreateNestedManyWithoutUser2Input
    channels?: ChannelMembershipUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMatch_hostInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatch_hostInput, UserUncheckedCreateWithoutMatch_hostInput>
  }

  export type UserCreateWithoutMatch_guestInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchCreateNestedManyWithoutPlayer_1Input
    stats?: StatsCreateNestedOneWithoutUserInput
    invited?: FriendshipsCreateNestedManyWithoutUser1Input
    invitor?: FriendshipsCreateNestedManyWithoutUser2Input
    initiator?: DirectMessagingCreateNestedManyWithoutUser1Input
    receiver?: DirectMessagingCreateNestedManyWithoutUser2Input
    channels?: ChannelMembershipCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMatch_guestInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchUncheckedCreateNestedManyWithoutPlayer_1Input
    stats?: StatsUncheckedCreateNestedOneWithoutUserInput
    invited?: FriendshipsUncheckedCreateNestedManyWithoutUser1Input
    invitor?: FriendshipsUncheckedCreateNestedManyWithoutUser2Input
    initiator?: DirectMessagingUncheckedCreateNestedManyWithoutUser1Input
    receiver?: DirectMessagingUncheckedCreateNestedManyWithoutUser2Input
    channels?: ChannelMembershipUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMatch_guestInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatch_guestInput, UserUncheckedCreateWithoutMatch_guestInput>
  }

  export type UserUpsertWithoutMatch_hostInput = {
    update: XOR<UserUpdateWithoutMatch_hostInput, UserUncheckedUpdateWithoutMatch_hostInput>
    create: XOR<UserCreateWithoutMatch_hostInput, UserUncheckedCreateWithoutMatch_hostInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMatch_hostInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMatch_hostInput, UserUncheckedUpdateWithoutMatch_hostInput>
  }

  export type UserUpdateWithoutMatch_hostInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_guest?: matchUpdateManyWithoutPlayer_2NestedInput
    stats?: StatsUpdateOneWithoutUserNestedInput
    invited?: FriendshipsUpdateManyWithoutUser1NestedInput
    invitor?: FriendshipsUpdateManyWithoutUser2NestedInput
    initiator?: DirectMessagingUpdateManyWithoutUser1NestedInput
    receiver?: DirectMessagingUpdateManyWithoutUser2NestedInput
    channels?: ChannelMembershipUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMatch_hostInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_guest?: matchUncheckedUpdateManyWithoutPlayer_2NestedInput
    stats?: StatsUncheckedUpdateOneWithoutUserNestedInput
    invited?: FriendshipsUncheckedUpdateManyWithoutUser1NestedInput
    invitor?: FriendshipsUncheckedUpdateManyWithoutUser2NestedInput
    initiator?: DirectMessagingUncheckedUpdateManyWithoutUser1NestedInput
    receiver?: DirectMessagingUncheckedUpdateManyWithoutUser2NestedInput
    channels?: ChannelMembershipUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutMatch_guestInput = {
    update: XOR<UserUpdateWithoutMatch_guestInput, UserUncheckedUpdateWithoutMatch_guestInput>
    create: XOR<UserCreateWithoutMatch_guestInput, UserUncheckedCreateWithoutMatch_guestInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMatch_guestInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMatch_guestInput, UserUncheckedUpdateWithoutMatch_guestInput>
  }

  export type UserUpdateWithoutMatch_guestInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUpdateManyWithoutPlayer_1NestedInput
    stats?: StatsUpdateOneWithoutUserNestedInput
    invited?: FriendshipsUpdateManyWithoutUser1NestedInput
    invitor?: FriendshipsUpdateManyWithoutUser2NestedInput
    initiator?: DirectMessagingUpdateManyWithoutUser1NestedInput
    receiver?: DirectMessagingUpdateManyWithoutUser2NestedInput
    channels?: ChannelMembershipUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMatch_guestInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUncheckedUpdateManyWithoutPlayer_1NestedInput
    stats?: StatsUncheckedUpdateOneWithoutUserNestedInput
    invited?: FriendshipsUncheckedUpdateManyWithoutUser1NestedInput
    invitor?: FriendshipsUncheckedUpdateManyWithoutUser2NestedInput
    initiator?: DirectMessagingUncheckedUpdateManyWithoutUser1NestedInput
    receiver?: DirectMessagingUncheckedUpdateManyWithoutUser2NestedInput
    channels?: ChannelMembershipUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutStatsInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchCreateNestedManyWithoutPlayer_1Input
    match_guest?: matchCreateNestedManyWithoutPlayer_2Input
    invited?: FriendshipsCreateNestedManyWithoutUser1Input
    invitor?: FriendshipsCreateNestedManyWithoutUser2Input
    initiator?: DirectMessagingCreateNestedManyWithoutUser1Input
    receiver?: DirectMessagingCreateNestedManyWithoutUser2Input
    channels?: ChannelMembershipCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStatsInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchUncheckedCreateNestedManyWithoutPlayer_1Input
    match_guest?: matchUncheckedCreateNestedManyWithoutPlayer_2Input
    invited?: FriendshipsUncheckedCreateNestedManyWithoutUser1Input
    invitor?: FriendshipsUncheckedCreateNestedManyWithoutUser2Input
    initiator?: DirectMessagingUncheckedCreateNestedManyWithoutUser1Input
    receiver?: DirectMessagingUncheckedCreateNestedManyWithoutUser2Input
    channels?: ChannelMembershipUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStatsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStatsInput, UserUncheckedCreateWithoutStatsInput>
  }

  export type UserUpsertWithoutStatsInput = {
    update: XOR<UserUpdateWithoutStatsInput, UserUncheckedUpdateWithoutStatsInput>
    create: XOR<UserCreateWithoutStatsInput, UserUncheckedCreateWithoutStatsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStatsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStatsInput, UserUncheckedUpdateWithoutStatsInput>
  }

  export type UserUpdateWithoutStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUpdateManyWithoutPlayer_1NestedInput
    match_guest?: matchUpdateManyWithoutPlayer_2NestedInput
    invited?: FriendshipsUpdateManyWithoutUser1NestedInput
    invitor?: FriendshipsUpdateManyWithoutUser2NestedInput
    initiator?: DirectMessagingUpdateManyWithoutUser1NestedInput
    receiver?: DirectMessagingUpdateManyWithoutUser2NestedInput
    channels?: ChannelMembershipUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUncheckedUpdateManyWithoutPlayer_1NestedInput
    match_guest?: matchUncheckedUpdateManyWithoutPlayer_2NestedInput
    invited?: FriendshipsUncheckedUpdateManyWithoutUser1NestedInput
    invitor?: FriendshipsUncheckedUpdateManyWithoutUser2NestedInput
    initiator?: DirectMessagingUncheckedUpdateManyWithoutUser1NestedInput
    receiver?: DirectMessagingUncheckedUpdateManyWithoutUser2NestedInput
    channels?: ChannelMembershipUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutInvitedInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchCreateNestedManyWithoutPlayer_1Input
    match_guest?: matchCreateNestedManyWithoutPlayer_2Input
    stats?: StatsCreateNestedOneWithoutUserInput
    invitor?: FriendshipsCreateNestedManyWithoutUser2Input
    initiator?: DirectMessagingCreateNestedManyWithoutUser1Input
    receiver?: DirectMessagingCreateNestedManyWithoutUser2Input
    channels?: ChannelMembershipCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInvitedInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchUncheckedCreateNestedManyWithoutPlayer_1Input
    match_guest?: matchUncheckedCreateNestedManyWithoutPlayer_2Input
    stats?: StatsUncheckedCreateNestedOneWithoutUserInput
    invitor?: FriendshipsUncheckedCreateNestedManyWithoutUser2Input
    initiator?: DirectMessagingUncheckedCreateNestedManyWithoutUser1Input
    receiver?: DirectMessagingUncheckedCreateNestedManyWithoutUser2Input
    channels?: ChannelMembershipUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInvitedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvitedInput, UserUncheckedCreateWithoutInvitedInput>
  }

  export type UserCreateWithoutInvitorInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchCreateNestedManyWithoutPlayer_1Input
    match_guest?: matchCreateNestedManyWithoutPlayer_2Input
    stats?: StatsCreateNestedOneWithoutUserInput
    invited?: FriendshipsCreateNestedManyWithoutUser1Input
    initiator?: DirectMessagingCreateNestedManyWithoutUser1Input
    receiver?: DirectMessagingCreateNestedManyWithoutUser2Input
    channels?: ChannelMembershipCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInvitorInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchUncheckedCreateNestedManyWithoutPlayer_1Input
    match_guest?: matchUncheckedCreateNestedManyWithoutPlayer_2Input
    stats?: StatsUncheckedCreateNestedOneWithoutUserInput
    invited?: FriendshipsUncheckedCreateNestedManyWithoutUser1Input
    initiator?: DirectMessagingUncheckedCreateNestedManyWithoutUser1Input
    receiver?: DirectMessagingUncheckedCreateNestedManyWithoutUser2Input
    channels?: ChannelMembershipUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInvitorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvitorInput, UserUncheckedCreateWithoutInvitorInput>
  }

  export type UserUpsertWithoutInvitedInput = {
    update: XOR<UserUpdateWithoutInvitedInput, UserUncheckedUpdateWithoutInvitedInput>
    create: XOR<UserCreateWithoutInvitedInput, UserUncheckedCreateWithoutInvitedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInvitedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInvitedInput, UserUncheckedUpdateWithoutInvitedInput>
  }

  export type UserUpdateWithoutInvitedInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUpdateManyWithoutPlayer_1NestedInput
    match_guest?: matchUpdateManyWithoutPlayer_2NestedInput
    stats?: StatsUpdateOneWithoutUserNestedInput
    invitor?: FriendshipsUpdateManyWithoutUser2NestedInput
    initiator?: DirectMessagingUpdateManyWithoutUser1NestedInput
    receiver?: DirectMessagingUpdateManyWithoutUser2NestedInput
    channels?: ChannelMembershipUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInvitedInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUncheckedUpdateManyWithoutPlayer_1NestedInput
    match_guest?: matchUncheckedUpdateManyWithoutPlayer_2NestedInput
    stats?: StatsUncheckedUpdateOneWithoutUserNestedInput
    invitor?: FriendshipsUncheckedUpdateManyWithoutUser2NestedInput
    initiator?: DirectMessagingUncheckedUpdateManyWithoutUser1NestedInput
    receiver?: DirectMessagingUncheckedUpdateManyWithoutUser2NestedInput
    channels?: ChannelMembershipUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutInvitorInput = {
    update: XOR<UserUpdateWithoutInvitorInput, UserUncheckedUpdateWithoutInvitorInput>
    create: XOR<UserCreateWithoutInvitorInput, UserUncheckedCreateWithoutInvitorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInvitorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInvitorInput, UserUncheckedUpdateWithoutInvitorInput>
  }

  export type UserUpdateWithoutInvitorInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUpdateManyWithoutPlayer_1NestedInput
    match_guest?: matchUpdateManyWithoutPlayer_2NestedInput
    stats?: StatsUpdateOneWithoutUserNestedInput
    invited?: FriendshipsUpdateManyWithoutUser1NestedInput
    initiator?: DirectMessagingUpdateManyWithoutUser1NestedInput
    receiver?: DirectMessagingUpdateManyWithoutUser2NestedInput
    channels?: ChannelMembershipUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInvitorInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUncheckedUpdateManyWithoutPlayer_1NestedInput
    match_guest?: matchUncheckedUpdateManyWithoutPlayer_2NestedInput
    stats?: StatsUncheckedUpdateOneWithoutUserNestedInput
    invited?: FriendshipsUncheckedUpdateManyWithoutUser1NestedInput
    initiator?: DirectMessagingUncheckedUpdateManyWithoutUser1NestedInput
    receiver?: DirectMessagingUncheckedUpdateManyWithoutUser2NestedInput
    channels?: ChannelMembershipUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ChannelCreateWithoutMemeberShipsInput = {
    id?: string
    type: Channel_type
    name: string
    image: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateWithoutMemeberShipsInput = {
    id?: string
    type: Channel_type
    name: string
    image: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelCreateOrConnectWithoutMemeberShipsInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutMemeberShipsInput, ChannelUncheckedCreateWithoutMemeberShipsInput>
  }

  export type UserCreateWithoutChannelsInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchCreateNestedManyWithoutPlayer_1Input
    match_guest?: matchCreateNestedManyWithoutPlayer_2Input
    stats?: StatsCreateNestedOneWithoutUserInput
    invited?: FriendshipsCreateNestedManyWithoutUser1Input
    invitor?: FriendshipsCreateNestedManyWithoutUser2Input
    initiator?: DirectMessagingCreateNestedManyWithoutUser1Input
    receiver?: DirectMessagingCreateNestedManyWithoutUser2Input
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChannelsInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchUncheckedCreateNestedManyWithoutPlayer_1Input
    match_guest?: matchUncheckedCreateNestedManyWithoutPlayer_2Input
    stats?: StatsUncheckedCreateNestedOneWithoutUserInput
    invited?: FriendshipsUncheckedCreateNestedManyWithoutUser1Input
    invitor?: FriendshipsUncheckedCreateNestedManyWithoutUser2Input
    initiator?: DirectMessagingUncheckedCreateNestedManyWithoutUser1Input
    receiver?: DirectMessagingUncheckedCreateNestedManyWithoutUser2Input
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChannelsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChannelsInput, UserUncheckedCreateWithoutChannelsInput>
  }

  export type ChannelUpsertWithoutMemeberShipsInput = {
    update: XOR<ChannelUpdateWithoutMemeberShipsInput, ChannelUncheckedUpdateWithoutMemeberShipsInput>
    create: XOR<ChannelCreateWithoutMemeberShipsInput, ChannelUncheckedCreateWithoutMemeberShipsInput>
    where?: ChannelWhereInput
  }

  export type ChannelUpdateToOneWithWhereWithoutMemeberShipsInput = {
    where?: ChannelWhereInput
    data: XOR<ChannelUpdateWithoutMemeberShipsInput, ChannelUncheckedUpdateWithoutMemeberShipsInput>
  }

  export type ChannelUpdateWithoutMemeberShipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumChannel_typeFieldUpdateOperationsInput | Channel_type
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateWithoutMemeberShipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumChannel_typeFieldUpdateOperationsInput | Channel_type
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type UserUpsertWithoutChannelsInput = {
    update: XOR<UserUpdateWithoutChannelsInput, UserUncheckedUpdateWithoutChannelsInput>
    create: XOR<UserCreateWithoutChannelsInput, UserUncheckedCreateWithoutChannelsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChannelsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChannelsInput, UserUncheckedUpdateWithoutChannelsInput>
  }

  export type UserUpdateWithoutChannelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUpdateManyWithoutPlayer_1NestedInput
    match_guest?: matchUpdateManyWithoutPlayer_2NestedInput
    stats?: StatsUpdateOneWithoutUserNestedInput
    invited?: FriendshipsUpdateManyWithoutUser1NestedInput
    invitor?: FriendshipsUpdateManyWithoutUser2NestedInput
    initiator?: DirectMessagingUpdateManyWithoutUser1NestedInput
    receiver?: DirectMessagingUpdateManyWithoutUser2NestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChannelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUncheckedUpdateManyWithoutPlayer_1NestedInput
    match_guest?: matchUncheckedUpdateManyWithoutPlayer_2NestedInput
    stats?: StatsUncheckedUpdateOneWithoutUserNestedInput
    invited?: FriendshipsUncheckedUpdateManyWithoutUser1NestedInput
    invitor?: FriendshipsUncheckedUpdateManyWithoutUser2NestedInput
    initiator?: DirectMessagingUncheckedUpdateManyWithoutUser1NestedInput
    receiver?: DirectMessagingUncheckedUpdateManyWithoutUser2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutMessagesInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchCreateNestedManyWithoutPlayer_1Input
    match_guest?: matchCreateNestedManyWithoutPlayer_2Input
    stats?: StatsCreateNestedOneWithoutUserInput
    invited?: FriendshipsCreateNestedManyWithoutUser1Input
    invitor?: FriendshipsCreateNestedManyWithoutUser2Input
    initiator?: DirectMessagingCreateNestedManyWithoutUser1Input
    receiver?: DirectMessagingCreateNestedManyWithoutUser2Input
    channels?: ChannelMembershipCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessagesInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchUncheckedCreateNestedManyWithoutPlayer_1Input
    match_guest?: matchUncheckedCreateNestedManyWithoutPlayer_2Input
    stats?: StatsUncheckedCreateNestedOneWithoutUserInput
    invited?: FriendshipsUncheckedCreateNestedManyWithoutUser1Input
    invitor?: FriendshipsUncheckedCreateNestedManyWithoutUser2Input
    initiator?: DirectMessagingUncheckedCreateNestedManyWithoutUser1Input
    receiver?: DirectMessagingUncheckedCreateNestedManyWithoutUser2Input
    channels?: ChannelMembershipUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type ChannelCreateWithoutMessagesInput = {
    id?: string
    type: Channel_type
    name: string
    image: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memeberShips?: ChannelMembershipCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateWithoutMessagesInput = {
    id?: string
    type: Channel_type
    name: string
    image: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memeberShips?: ChannelMembershipUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelCreateOrConnectWithoutMessagesInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
  }

  export type DirectMessagingCreateWithoutMessagesInput = {
    id?: string
    status?: DmStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user1: UserCreateNestedOneWithoutInitiatorInput
    user2: UserCreateNestedOneWithoutReceiverInput
  }

  export type DirectMessagingUncheckedCreateWithoutMessagesInput = {
    id?: string
    user1_id: string
    user2_id: string
    status?: DmStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DirectMessagingCreateOrConnectWithoutMessagesInput = {
    where: DirectMessagingWhereUniqueInput
    create: XOR<DirectMessagingCreateWithoutMessagesInput, DirectMessagingUncheckedCreateWithoutMessagesInput>
  }

  export type UserUpsertWithoutMessagesInput = {
    update: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUpdateManyWithoutPlayer_1NestedInput
    match_guest?: matchUpdateManyWithoutPlayer_2NestedInput
    stats?: StatsUpdateOneWithoutUserNestedInput
    invited?: FriendshipsUpdateManyWithoutUser1NestedInput
    invitor?: FriendshipsUpdateManyWithoutUser2NestedInput
    initiator?: DirectMessagingUpdateManyWithoutUser1NestedInput
    receiver?: DirectMessagingUpdateManyWithoutUser2NestedInput
    channels?: ChannelMembershipUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUncheckedUpdateManyWithoutPlayer_1NestedInput
    match_guest?: matchUncheckedUpdateManyWithoutPlayer_2NestedInput
    stats?: StatsUncheckedUpdateOneWithoutUserNestedInput
    invited?: FriendshipsUncheckedUpdateManyWithoutUser1NestedInput
    invitor?: FriendshipsUncheckedUpdateManyWithoutUser2NestedInput
    initiator?: DirectMessagingUncheckedUpdateManyWithoutUser1NestedInput
    receiver?: DirectMessagingUncheckedUpdateManyWithoutUser2NestedInput
    channels?: ChannelMembershipUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ChannelUpsertWithoutMessagesInput = {
    update: XOR<ChannelUpdateWithoutMessagesInput, ChannelUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
    where?: ChannelWhereInput
  }

  export type ChannelUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChannelWhereInput
    data: XOR<ChannelUpdateWithoutMessagesInput, ChannelUncheckedUpdateWithoutMessagesInput>
  }

  export type ChannelUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumChannel_typeFieldUpdateOperationsInput | Channel_type
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memeberShips?: ChannelMembershipUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumChannel_typeFieldUpdateOperationsInput | Channel_type
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memeberShips?: ChannelMembershipUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type DirectMessagingUpsertWithoutMessagesInput = {
    update: XOR<DirectMessagingUpdateWithoutMessagesInput, DirectMessagingUncheckedUpdateWithoutMessagesInput>
    create: XOR<DirectMessagingCreateWithoutMessagesInput, DirectMessagingUncheckedCreateWithoutMessagesInput>
    where?: DirectMessagingWhereInput
  }

  export type DirectMessagingUpdateToOneWithWhereWithoutMessagesInput = {
    where?: DirectMessagingWhereInput
    data: XOR<DirectMessagingUpdateWithoutMessagesInput, DirectMessagingUncheckedUpdateWithoutMessagesInput>
  }

  export type DirectMessagingUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumDmStatusFieldUpdateOperationsInput | DmStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user1?: UserUpdateOneRequiredWithoutInitiatorNestedInput
    user2?: UserUpdateOneRequiredWithoutReceiverNestedInput
  }

  export type DirectMessagingUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    user1_id?: StringFieldUpdateOperationsInput | string
    user2_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDmStatusFieldUpdateOperationsInput | DmStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChannelMembershipCreateWithoutChannelInput = {
    id?: string
    role: Role
    joined_at?: Date | string
    is_banned?: boolean
    banned_at?: Date | string | null
    user: UserCreateNestedOneWithoutChannelsInput
  }

  export type ChannelMembershipUncheckedCreateWithoutChannelInput = {
    id?: string
    user_id: string
    role: Role
    joined_at?: Date | string
    is_banned?: boolean
    banned_at?: Date | string | null
  }

  export type ChannelMembershipCreateOrConnectWithoutChannelInput = {
    where: ChannelMembershipWhereUniqueInput
    create: XOR<ChannelMembershipCreateWithoutChannelInput, ChannelMembershipUncheckedCreateWithoutChannelInput>
  }

  export type ChannelMembershipCreateManyChannelInputEnvelope = {
    data: ChannelMembershipCreateManyChannelInput | ChannelMembershipCreateManyChannelInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutChannelInput = {
    id?: string
    content: string
    createdAt?: Date | string | null
    is_read?: boolean | null
    user: UserCreateNestedOneWithoutMessagesInput
    dm?: DirectMessagingCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutChannelInput = {
    id?: string
    user_id: string
    dm_id?: string | null
    content: string
    createdAt?: Date | string | null
    is_read?: boolean | null
  }

  export type MessageCreateOrConnectWithoutChannelInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput>
  }

  export type MessageCreateManyChannelInputEnvelope = {
    data: MessageCreateManyChannelInput | MessageCreateManyChannelInput[]
    skipDuplicates?: boolean
  }

  export type ChannelMembershipUpsertWithWhereUniqueWithoutChannelInput = {
    where: ChannelMembershipWhereUniqueInput
    update: XOR<ChannelMembershipUpdateWithoutChannelInput, ChannelMembershipUncheckedUpdateWithoutChannelInput>
    create: XOR<ChannelMembershipCreateWithoutChannelInput, ChannelMembershipUncheckedCreateWithoutChannelInput>
  }

  export type ChannelMembershipUpdateWithWhereUniqueWithoutChannelInput = {
    where: ChannelMembershipWhereUniqueInput
    data: XOR<ChannelMembershipUpdateWithoutChannelInput, ChannelMembershipUncheckedUpdateWithoutChannelInput>
  }

  export type ChannelMembershipUpdateManyWithWhereWithoutChannelInput = {
    where: ChannelMembershipScalarWhereInput
    data: XOR<ChannelMembershipUpdateManyMutationInput, ChannelMembershipUncheckedUpdateManyWithoutChannelInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutChannelInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutChannelInput, MessageUncheckedUpdateWithoutChannelInput>
    create: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutChannelInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutChannelInput, MessageUncheckedUpdateWithoutChannelInput>
  }

  export type MessageUpdateManyWithWhereWithoutChannelInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutChannelInput>
  }

  export type UserCreateWithoutInitiatorInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchCreateNestedManyWithoutPlayer_1Input
    match_guest?: matchCreateNestedManyWithoutPlayer_2Input
    stats?: StatsCreateNestedOneWithoutUserInput
    invited?: FriendshipsCreateNestedManyWithoutUser1Input
    invitor?: FriendshipsCreateNestedManyWithoutUser2Input
    receiver?: DirectMessagingCreateNestedManyWithoutUser2Input
    channels?: ChannelMembershipCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInitiatorInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchUncheckedCreateNestedManyWithoutPlayer_1Input
    match_guest?: matchUncheckedCreateNestedManyWithoutPlayer_2Input
    stats?: StatsUncheckedCreateNestedOneWithoutUserInput
    invited?: FriendshipsUncheckedCreateNestedManyWithoutUser1Input
    invitor?: FriendshipsUncheckedCreateNestedManyWithoutUser2Input
    receiver?: DirectMessagingUncheckedCreateNestedManyWithoutUser2Input
    channels?: ChannelMembershipUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInitiatorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInitiatorInput, UserUncheckedCreateWithoutInitiatorInput>
  }

  export type UserCreateWithoutReceiverInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchCreateNestedManyWithoutPlayer_1Input
    match_guest?: matchCreateNestedManyWithoutPlayer_2Input
    stats?: StatsCreateNestedOneWithoutUserInput
    invited?: FriendshipsCreateNestedManyWithoutUser1Input
    invitor?: FriendshipsCreateNestedManyWithoutUser2Input
    initiator?: DirectMessagingCreateNestedManyWithoutUser1Input
    channels?: ChannelMembershipCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceiverInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchUncheckedCreateNestedManyWithoutPlayer_1Input
    match_guest?: matchUncheckedCreateNestedManyWithoutPlayer_2Input
    stats?: StatsUncheckedCreateNestedOneWithoutUserInput
    invited?: FriendshipsUncheckedCreateNestedManyWithoutUser1Input
    invitor?: FriendshipsUncheckedCreateNestedManyWithoutUser2Input
    initiator?: DirectMessagingUncheckedCreateNestedManyWithoutUser1Input
    channels?: ChannelMembershipUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceiverInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceiverInput, UserUncheckedCreateWithoutReceiverInput>
  }

  export type MessageCreateWithoutDmInput = {
    id?: string
    content: string
    createdAt?: Date | string | null
    is_read?: boolean | null
    user: UserCreateNestedOneWithoutMessagesInput
    channel?: ChannelCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutDmInput = {
    id?: string
    user_id: string
    channel_id?: string | null
    content: string
    createdAt?: Date | string | null
    is_read?: boolean | null
  }

  export type MessageCreateOrConnectWithoutDmInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutDmInput, MessageUncheckedCreateWithoutDmInput>
  }

  export type MessageCreateManyDmInputEnvelope = {
    data: MessageCreateManyDmInput | MessageCreateManyDmInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutInitiatorInput = {
    update: XOR<UserUpdateWithoutInitiatorInput, UserUncheckedUpdateWithoutInitiatorInput>
    create: XOR<UserCreateWithoutInitiatorInput, UserUncheckedCreateWithoutInitiatorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInitiatorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInitiatorInput, UserUncheckedUpdateWithoutInitiatorInput>
  }

  export type UserUpdateWithoutInitiatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUpdateManyWithoutPlayer_1NestedInput
    match_guest?: matchUpdateManyWithoutPlayer_2NestedInput
    stats?: StatsUpdateOneWithoutUserNestedInput
    invited?: FriendshipsUpdateManyWithoutUser1NestedInput
    invitor?: FriendshipsUpdateManyWithoutUser2NestedInput
    receiver?: DirectMessagingUpdateManyWithoutUser2NestedInput
    channels?: ChannelMembershipUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInitiatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUncheckedUpdateManyWithoutPlayer_1NestedInput
    match_guest?: matchUncheckedUpdateManyWithoutPlayer_2NestedInput
    stats?: StatsUncheckedUpdateOneWithoutUserNestedInput
    invited?: FriendshipsUncheckedUpdateManyWithoutUser1NestedInput
    invitor?: FriendshipsUncheckedUpdateManyWithoutUser2NestedInput
    receiver?: DirectMessagingUncheckedUpdateManyWithoutUser2NestedInput
    channels?: ChannelMembershipUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutReceiverInput = {
    update: XOR<UserUpdateWithoutReceiverInput, UserUncheckedUpdateWithoutReceiverInput>
    create: XOR<UserCreateWithoutReceiverInput, UserUncheckedCreateWithoutReceiverInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceiverInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceiverInput, UserUncheckedUpdateWithoutReceiverInput>
  }

  export type UserUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUpdateManyWithoutPlayer_1NestedInput
    match_guest?: matchUpdateManyWithoutPlayer_2NestedInput
    stats?: StatsUpdateOneWithoutUserNestedInput
    invited?: FriendshipsUpdateManyWithoutUser1NestedInput
    invitor?: FriendshipsUpdateManyWithoutUser2NestedInput
    initiator?: DirectMessagingUpdateManyWithoutUser1NestedInput
    channels?: ChannelMembershipUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUncheckedUpdateManyWithoutPlayer_1NestedInput
    match_guest?: matchUncheckedUpdateManyWithoutPlayer_2NestedInput
    stats?: StatsUncheckedUpdateOneWithoutUserNestedInput
    invited?: FriendshipsUncheckedUpdateManyWithoutUser1NestedInput
    invitor?: FriendshipsUncheckedUpdateManyWithoutUser2NestedInput
    initiator?: DirectMessagingUncheckedUpdateManyWithoutUser1NestedInput
    channels?: ChannelMembershipUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MessageUpsertWithWhereUniqueWithoutDmInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutDmInput, MessageUncheckedUpdateWithoutDmInput>
    create: XOR<MessageCreateWithoutDmInput, MessageUncheckedCreateWithoutDmInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutDmInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutDmInput, MessageUncheckedUpdateWithoutDmInput>
  }

  export type MessageUpdateManyWithWhereWithoutDmInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutDmInput>
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchCreateNestedManyWithoutPlayer_1Input
    match_guest?: matchCreateNestedManyWithoutPlayer_2Input
    stats?: StatsCreateNestedOneWithoutUserInput
    invited?: FriendshipsCreateNestedManyWithoutUser1Input
    invitor?: FriendshipsCreateNestedManyWithoutUser2Input
    initiator?: DirectMessagingCreateNestedManyWithoutUser1Input
    receiver?: DirectMessagingCreateNestedManyWithoutUser2Input
    channels?: ChannelMembershipCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    username: string
    firstname: string
    lastname: string
    email: string
    avatar: string
    background: string
    firstauth?: boolean
    status?: Status
    match_host?: matchUncheckedCreateNestedManyWithoutPlayer_1Input
    match_guest?: matchUncheckedCreateNestedManyWithoutPlayer_2Input
    stats?: StatsUncheckedCreateNestedOneWithoutUserInput
    invited?: FriendshipsUncheckedCreateNestedManyWithoutUser1Input
    invitor?: FriendshipsUncheckedCreateNestedManyWithoutUser2Input
    initiator?: DirectMessagingUncheckedCreateNestedManyWithoutUser1Input
    receiver?: DirectMessagingUncheckedCreateNestedManyWithoutUser2Input
    channels?: ChannelMembershipUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUpdateManyWithoutPlayer_1NestedInput
    match_guest?: matchUpdateManyWithoutPlayer_2NestedInput
    stats?: StatsUpdateOneWithoutUserNestedInput
    invited?: FriendshipsUpdateManyWithoutUser1NestedInput
    invitor?: FriendshipsUpdateManyWithoutUser2NestedInput
    initiator?: DirectMessagingUpdateManyWithoutUser1NestedInput
    receiver?: DirectMessagingUpdateManyWithoutUser2NestedInput
    channels?: ChannelMembershipUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    firstauth?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStatusFieldUpdateOperationsInput | Status
    match_host?: matchUncheckedUpdateManyWithoutPlayer_1NestedInput
    match_guest?: matchUncheckedUpdateManyWithoutPlayer_2NestedInput
    stats?: StatsUncheckedUpdateOneWithoutUserNestedInput
    invited?: FriendshipsUncheckedUpdateManyWithoutUser1NestedInput
    invitor?: FriendshipsUncheckedUpdateManyWithoutUser2NestedInput
    initiator?: DirectMessagingUncheckedUpdateManyWithoutUser1NestedInput
    receiver?: DirectMessagingUncheckedUpdateManyWithoutUser2NestedInput
    channels?: ChannelMembershipUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type matchCreateManyPlayer_1Input = {
    id?: string
    player_2_id: string
    result: string
  }

  export type matchCreateManyPlayer_2Input = {
    id?: string
    player_1_id: string
    result: string
  }

  export type FriendshipsCreateManyUser1Input = {
    id?: string
    user2_id: string
    createdAt?: Date | string
    relationStatus?: RelationStatus
  }

  export type FriendshipsCreateManyUser2Input = {
    id?: string
    user1_id: string
    createdAt?: Date | string
    relationStatus?: RelationStatus
  }

  export type DirectMessagingCreateManyUser1Input = {
    id?: string
    user2_id: string
    status?: DmStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DirectMessagingCreateManyUser2Input = {
    id?: string
    user1_id: string
    status?: DmStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChannelMembershipCreateManyUserInput = {
    id?: string
    channel_id: string
    role: Role
    joined_at?: Date | string
    is_banned?: boolean
    banned_at?: Date | string | null
  }

  export type MessageCreateManyUserInput = {
    id?: string
    channel_id?: string | null
    dm_id?: string | null
    content: string
    createdAt?: Date | string | null
    is_read?: boolean | null
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    type: NotificationType
    createdAt?: Date | string
  }

  export type matchUpdateWithoutPlayer_1Input = {
    id?: StringFieldUpdateOperationsInput | string
    result?: StringFieldUpdateOperationsInput | string
    player_2?: UserUpdateOneRequiredWithoutMatch_guestNestedInput
  }

  export type matchUncheckedUpdateWithoutPlayer_1Input = {
    id?: StringFieldUpdateOperationsInput | string
    player_2_id?: StringFieldUpdateOperationsInput | string
    result?: StringFieldUpdateOperationsInput | string
  }

  export type matchUncheckedUpdateManyWithoutPlayer_1Input = {
    id?: StringFieldUpdateOperationsInput | string
    player_2_id?: StringFieldUpdateOperationsInput | string
    result?: StringFieldUpdateOperationsInput | string
  }

  export type matchUpdateWithoutPlayer_2Input = {
    id?: StringFieldUpdateOperationsInput | string
    result?: StringFieldUpdateOperationsInput | string
    player_1?: UserUpdateOneRequiredWithoutMatch_hostNestedInput
  }

  export type matchUncheckedUpdateWithoutPlayer_2Input = {
    id?: StringFieldUpdateOperationsInput | string
    player_1_id?: StringFieldUpdateOperationsInput | string
    result?: StringFieldUpdateOperationsInput | string
  }

  export type matchUncheckedUpdateManyWithoutPlayer_2Input = {
    id?: StringFieldUpdateOperationsInput | string
    player_1_id?: StringFieldUpdateOperationsInput | string
    result?: StringFieldUpdateOperationsInput | string
  }

  export type FriendshipsUpdateWithoutUser1Input = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationStatus?: EnumRelationStatusFieldUpdateOperationsInput | RelationStatus
    user2?: UserUpdateOneRequiredWithoutInvitorNestedInput
  }

  export type FriendshipsUncheckedUpdateWithoutUser1Input = {
    id?: StringFieldUpdateOperationsInput | string
    user2_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationStatus?: EnumRelationStatusFieldUpdateOperationsInput | RelationStatus
  }

  export type FriendshipsUncheckedUpdateManyWithoutUser1Input = {
    id?: StringFieldUpdateOperationsInput | string
    user2_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationStatus?: EnumRelationStatusFieldUpdateOperationsInput | RelationStatus
  }

  export type FriendshipsUpdateWithoutUser2Input = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationStatus?: EnumRelationStatusFieldUpdateOperationsInput | RelationStatus
    user1?: UserUpdateOneRequiredWithoutInvitedNestedInput
  }

  export type FriendshipsUncheckedUpdateWithoutUser2Input = {
    id?: StringFieldUpdateOperationsInput | string
    user1_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationStatus?: EnumRelationStatusFieldUpdateOperationsInput | RelationStatus
  }

  export type FriendshipsUncheckedUpdateManyWithoutUser2Input = {
    id?: StringFieldUpdateOperationsInput | string
    user1_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationStatus?: EnumRelationStatusFieldUpdateOperationsInput | RelationStatus
  }

  export type DirectMessagingUpdateWithoutUser1Input = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumDmStatusFieldUpdateOperationsInput | DmStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user2?: UserUpdateOneRequiredWithoutReceiverNestedInput
    messages?: MessageUpdateManyWithoutDmNestedInput
  }

  export type DirectMessagingUncheckedUpdateWithoutUser1Input = {
    id?: StringFieldUpdateOperationsInput | string
    user2_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDmStatusFieldUpdateOperationsInput | DmStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutDmNestedInput
  }

  export type DirectMessagingUncheckedUpdateManyWithoutUser1Input = {
    id?: StringFieldUpdateOperationsInput | string
    user2_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDmStatusFieldUpdateOperationsInput | DmStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMessagingUpdateWithoutUser2Input = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumDmStatusFieldUpdateOperationsInput | DmStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user1?: UserUpdateOneRequiredWithoutInitiatorNestedInput
    messages?: MessageUpdateManyWithoutDmNestedInput
  }

  export type DirectMessagingUncheckedUpdateWithoutUser2Input = {
    id?: StringFieldUpdateOperationsInput | string
    user1_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDmStatusFieldUpdateOperationsInput | DmStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutDmNestedInput
  }

  export type DirectMessagingUncheckedUpdateManyWithoutUser2Input = {
    id?: StringFieldUpdateOperationsInput | string
    user1_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDmStatusFieldUpdateOperationsInput | DmStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChannelMembershipUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    banned_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    channel?: ChannelUpdateOneRequiredWithoutMemeberShipsNestedInput
  }

  export type ChannelMembershipUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    channel_id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    banned_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ChannelMembershipUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    channel_id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    banned_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_read?: NullableBoolFieldUpdateOperationsInput | boolean | null
    channel?: ChannelUpdateOneWithoutMessagesNestedInput
    dm?: DirectMessagingUpdateOneWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    channel_id?: NullableStringFieldUpdateOperationsInput | string | null
    dm_id?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_read?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type MessageUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    channel_id?: NullableStringFieldUpdateOperationsInput | string | null
    dm_id?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_read?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | NotificationType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | NotificationType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | NotificationType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChannelMembershipCreateManyChannelInput = {
    id?: string
    user_id: string
    role: Role
    joined_at?: Date | string
    is_banned?: boolean
    banned_at?: Date | string | null
  }

  export type MessageCreateManyChannelInput = {
    id?: string
    user_id: string
    dm_id?: string | null
    content: string
    createdAt?: Date | string | null
    is_read?: boolean | null
  }

  export type ChannelMembershipUpdateWithoutChannelInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    banned_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutChannelsNestedInput
  }

  export type ChannelMembershipUncheckedUpdateWithoutChannelInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    banned_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ChannelMembershipUncheckedUpdateManyWithoutChannelInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    banned_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageUpdateWithoutChannelInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_read?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
    dm?: DirectMessagingUpdateOneWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutChannelInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    dm_id?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_read?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type MessageUncheckedUpdateManyWithoutChannelInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    dm_id?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_read?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type MessageCreateManyDmInput = {
    id?: string
    user_id: string
    channel_id?: string | null
    content: string
    createdAt?: Date | string | null
    is_read?: boolean | null
  }

  export type MessageUpdateWithoutDmInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_read?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
    channel?: ChannelUpdateOneWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutDmInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    channel_id?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_read?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type MessageUncheckedUpdateManyWithoutDmInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    channel_id?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_read?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}